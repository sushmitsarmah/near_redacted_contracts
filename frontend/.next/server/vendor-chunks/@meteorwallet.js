"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@meteorwallet";
exports.ids = ["vendor-chunks/@meteorwallet"];
exports.modules = {

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/node_modules/borsh/lib/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/node_modules/borsh/lib/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\"));\nconst bs58_1 = __importDefault(__webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/bs58/index.js\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(__webpack_require__(/*! text-encoding-utf-8 */ \"(ssr)/./node_modules/text-encoding-utf-8/lib/encoding.lib.js\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvbm9kZV9tb2R1bGVzL2JvcnNoL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSxtQ0FBbUMsb0NBQW9DLGdCQUFnQjtBQUN2RixDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxRQUFRO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixHQUFHLG1CQUFtQixHQUFHLGlCQUFpQixHQUFHLG9CQUFvQixHQUFHLG9CQUFvQixHQUFHLGtCQUFrQixHQUFHLGtCQUFrQixHQUFHLGtCQUFrQjtBQUNuTCxnQ0FBZ0MsbUJBQU8sQ0FBQyxtREFBTztBQUMvQywrQkFBK0IsbUJBQU8sQ0FBQyxnREFBTTtBQUM3QztBQUNBLDhCQUE4QixtQkFBTyxDQUFDLHlGQUFxQjtBQUMzRDtBQUNBLHVEQUF1RCxhQUFhO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELEtBQUs7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsRUFBRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFNBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixpQ0FBaUM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRUFBMkUsYUFBYSxZQUFZLGNBQWM7QUFDbEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSxhQUFhLFlBQVksY0FBYztBQUNsSDtBQUNBLGdDQUFnQyxrQkFBa0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxXQUFXO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0Msc0JBQXNCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixrQ0FBa0M7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELG1CQUFtQixNQUFNLHFCQUFxQjtBQUN0RztBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsaUNBQWlDO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGtCQUFrQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsWUFBWTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsZ0JBQWdCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsS0FBSztBQUNyRDtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IseUJBQXlCO0FBQ3hEO0FBQ0Esb0RBQW9ELG1CQUFtQixNQUFNLDJCQUEyQjtBQUN4RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsK0JBQStCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9AbWV0ZW9yd2FsbGV0L3Nkay9ub2RlX21vZHVsZXMvYm9yc2gvbGliL2luZGV4LmpzP2E2MDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZXNlcmlhbGl6ZVVuY2hlY2tlZCA9IGV4cG9ydHMuZGVzZXJpYWxpemUgPSBleHBvcnRzLnNlcmlhbGl6ZSA9IGV4cG9ydHMuQmluYXJ5UmVhZGVyID0gZXhwb3J0cy5CaW5hcnlXcml0ZXIgPSBleHBvcnRzLkJvcnNoRXJyb3IgPSBleHBvcnRzLmJhc2VEZWNvZGUgPSBleHBvcnRzLmJhc2VFbmNvZGUgPSB2b2lkIDA7XG5jb25zdCBibl9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJibi5qc1wiKSk7XG5jb25zdCBiczU4XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImJzNThcIikpO1xuLy8gVE9ETzogTWFrZSBzdXJlIHRoaXMgcG9seWZpbGwgbm90IGluY2x1ZGVkIHdoZW4gbm90IHJlcXVpcmVkXG5jb25zdCBlbmNvZGluZyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwidGV4dC1lbmNvZGluZy11dGYtOFwiKSk7XG5jb25zdCBSZXNvbHZlZFRleHREZWNvZGVyID0gdHlwZW9mIFRleHREZWNvZGVyICE9PSBcImZ1bmN0aW9uXCIgPyBlbmNvZGluZy5UZXh0RGVjb2RlciA6IFRleHREZWNvZGVyO1xuY29uc3QgdGV4dERlY29kZXIgPSBuZXcgUmVzb2x2ZWRUZXh0RGVjb2RlcihcInV0Zi04XCIsIHsgZmF0YWw6IHRydWUgfSk7XG5mdW5jdGlvbiBiYXNlRW5jb2RlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YWx1ZSA9IEJ1ZmZlci5mcm9tKHZhbHVlLCBcInV0ZjhcIik7XG4gICAgfVxuICAgIHJldHVybiBiczU4XzEuZGVmYXVsdC5lbmNvZGUoQnVmZmVyLmZyb20odmFsdWUpKTtcbn1cbmV4cG9ydHMuYmFzZUVuY29kZSA9IGJhc2VFbmNvZGU7XG5mdW5jdGlvbiBiYXNlRGVjb2RlKHZhbHVlKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJzNThfMS5kZWZhdWx0LmRlY29kZSh2YWx1ZSkpO1xufVxuZXhwb3J0cy5iYXNlRGVjb2RlID0gYmFzZURlY29kZTtcbmNvbnN0IElOSVRJQUxfTEVOR1RIID0gMTAyNDtcbmNsYXNzIEJvcnNoRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5maWVsZFBhdGggPSBbXTtcbiAgICAgICAgdGhpcy5vcmlnaW5hbE1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIH1cbiAgICBhZGRUb0ZpZWxkUGF0aChmaWVsZE5hbWUpIHtcbiAgICAgICAgdGhpcy5maWVsZFBhdGguc3BsaWNlKDAsIDAsIGZpZWxkTmFtZSk7XG4gICAgICAgIC8vIE5PVEU6IE1vZGlmeWluZyBtZXNzYWdlIGRpcmVjdGx5IGFzIGplc3QgZG9lc24ndCB1c2UgLnRvU3RyaW5nKClcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gdGhpcy5vcmlnaW5hbE1lc3NhZ2UgKyBcIjogXCIgKyB0aGlzLmZpZWxkUGF0aC5qb2luKFwiLlwiKTtcbiAgICB9XG59XG5leHBvcnRzLkJvcnNoRXJyb3IgPSBCb3JzaEVycm9yO1xuLy8vIEJpbmFyeSBlbmNvZGVyLlxuY2xhc3MgQmluYXJ5V3JpdGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5idWYgPSBCdWZmZXIuYWxsb2MoSU5JVElBTF9MRU5HVEgpO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgfVxuICAgIG1heWJlUmVzaXplKCkge1xuICAgICAgICBpZiAodGhpcy5idWYubGVuZ3RoIDwgMTYgKyB0aGlzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5idWYgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmJ1ZiwgQnVmZmVyLmFsbG9jKElOSVRJQUxfTEVOR1RIKV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdyaXRlVTgodmFsdWUpIHtcbiAgICAgICAgdGhpcy5tYXliZVJlc2l6ZSgpO1xuICAgICAgICB0aGlzLmJ1Zi53cml0ZVVJbnQ4KHZhbHVlLCB0aGlzLmxlbmd0aCk7XG4gICAgICAgIHRoaXMubGVuZ3RoICs9IDE7XG4gICAgfVxuICAgIHdyaXRlVTE2KHZhbHVlKSB7XG4gICAgICAgIHRoaXMubWF5YmVSZXNpemUoKTtcbiAgICAgICAgdGhpcy5idWYud3JpdGVVSW50MTZMRSh2YWx1ZSwgdGhpcy5sZW5ndGgpO1xuICAgICAgICB0aGlzLmxlbmd0aCArPSAyO1xuICAgIH1cbiAgICB3cml0ZVUzMih2YWx1ZSkge1xuICAgICAgICB0aGlzLm1heWJlUmVzaXplKCk7XG4gICAgICAgIHRoaXMuYnVmLndyaXRlVUludDMyTEUodmFsdWUsIHRoaXMubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5sZW5ndGggKz0gNDtcbiAgICB9XG4gICAgd3JpdGVVNjQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5tYXliZVJlc2l6ZSgpO1xuICAgICAgICB0aGlzLndyaXRlQnVmZmVyKEJ1ZmZlci5mcm9tKG5ldyBibl9qc18xLmRlZmF1bHQodmFsdWUpLnRvQXJyYXkoXCJsZVwiLCA4KSkpO1xuICAgIH1cbiAgICB3cml0ZVUxMjgodmFsdWUpIHtcbiAgICAgICAgdGhpcy5tYXliZVJlc2l6ZSgpO1xuICAgICAgICB0aGlzLndyaXRlQnVmZmVyKEJ1ZmZlci5mcm9tKG5ldyBibl9qc18xLmRlZmF1bHQodmFsdWUpLnRvQXJyYXkoXCJsZVwiLCAxNikpKTtcbiAgICB9XG4gICAgd3JpdGVVMjU2KHZhbHVlKSB7XG4gICAgICAgIHRoaXMubWF5YmVSZXNpemUoKTtcbiAgICAgICAgdGhpcy53cml0ZUJ1ZmZlcihCdWZmZXIuZnJvbShuZXcgYm5fanNfMS5kZWZhdWx0KHZhbHVlKS50b0FycmF5KFwibGVcIiwgMzIpKSk7XG4gICAgfVxuICAgIHdyaXRlVTUxMih2YWx1ZSkge1xuICAgICAgICB0aGlzLm1heWJlUmVzaXplKCk7XG4gICAgICAgIHRoaXMud3JpdGVCdWZmZXIoQnVmZmVyLmZyb20obmV3IGJuX2pzXzEuZGVmYXVsdCh2YWx1ZSkudG9BcnJheShcImxlXCIsIDY0KSkpO1xuICAgIH1cbiAgICB3cml0ZUJ1ZmZlcihidWZmZXIpIHtcbiAgICAgICAgLy8gQnVmZmVyLmZyb20gaXMgbmVlZGVkIGFzIHRoaXMuYnVmLnN1YmFycmF5IGNhbiByZXR1cm4gcGxhaW4gVWludDhBcnJheSBpbiBicm93c2VyXG4gICAgICAgIHRoaXMuYnVmID0gQnVmZmVyLmNvbmNhdChbXG4gICAgICAgICAgICBCdWZmZXIuZnJvbSh0aGlzLmJ1Zi5zdWJhcnJheSgwLCB0aGlzLmxlbmd0aCkpLFxuICAgICAgICAgICAgYnVmZmVyLFxuICAgICAgICAgICAgQnVmZmVyLmFsbG9jKElOSVRJQUxfTEVOR1RIKSxcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMubGVuZ3RoICs9IGJ1ZmZlci5sZW5ndGg7XG4gICAgfVxuICAgIHdyaXRlU3RyaW5nKHN0cikge1xuICAgICAgICB0aGlzLm1heWJlUmVzaXplKCk7XG4gICAgICAgIGNvbnN0IGIgPSBCdWZmZXIuZnJvbShzdHIsIFwidXRmOFwiKTtcbiAgICAgICAgdGhpcy53cml0ZVUzMihiLmxlbmd0aCk7XG4gICAgICAgIHRoaXMud3JpdGVCdWZmZXIoYik7XG4gICAgfVxuICAgIHdyaXRlRml4ZWRBcnJheShhcnJheSkge1xuICAgICAgICB0aGlzLndyaXRlQnVmZmVyKEJ1ZmZlci5mcm9tKGFycmF5KSk7XG4gICAgfVxuICAgIHdyaXRlQXJyYXkoYXJyYXksIGZuKSB7XG4gICAgICAgIHRoaXMubWF5YmVSZXNpemUoKTtcbiAgICAgICAgdGhpcy53cml0ZVUzMihhcnJheS5sZW5ndGgpO1xuICAgICAgICBmb3IgKGNvbnN0IGVsZW0gb2YgYXJyYXkpIHtcbiAgICAgICAgICAgIHRoaXMubWF5YmVSZXNpemUoKTtcbiAgICAgICAgICAgIGZuKGVsZW0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvQXJyYXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1Zi5zdWJhcnJheSgwLCB0aGlzLmxlbmd0aCk7XG4gICAgfVxufVxuZXhwb3J0cy5CaW5hcnlXcml0ZXIgPSBCaW5hcnlXcml0ZXI7XG5mdW5jdGlvbiBoYW5kbGluZ1JhbmdlRXJyb3IodGFyZ2V0LCBwcm9wZXJ0eUtleSwgcHJvcGVydHlEZXNjcmlwdG9yKSB7XG4gICAgY29uc3Qgb3JpZ2luYWxNZXRob2QgPSBwcm9wZXJ0eURlc2NyaXB0b3IudmFsdWU7XG4gICAgcHJvcGVydHlEZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbE1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBSYW5nZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29kZSA9IGUuY29kZTtcbiAgICAgICAgICAgICAgICBpZiAoW1wiRVJSX0JVRkZFUl9PVVRfT0ZfQk9VTkRTXCIsIFwiRVJSX09VVF9PRl9SQU5HRVwiXS5pbmRleE9mKGNvZGUpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJvcnNoRXJyb3IoXCJSZWFjaGVkIHRoZSBlbmQgb2YgYnVmZmVyIHdoZW4gZGVzZXJpYWxpemluZ1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmNsYXNzIEJpbmFyeVJlYWRlciB7XG4gICAgY29uc3RydWN0b3IoYnVmKSB7XG4gICAgICAgIHRoaXMuYnVmID0gYnVmO1xuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgfVxuICAgIHJlYWRVOCgpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmJ1Zi5yZWFkVUludDgodGhpcy5vZmZzZXQpO1xuICAgICAgICB0aGlzLm9mZnNldCArPSAxO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJlYWRVMTYoKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5idWYucmVhZFVJbnQxNkxFKHRoaXMub2Zmc2V0KTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gMjtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZWFkVTMyKCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuYnVmLnJlYWRVSW50MzJMRSh0aGlzLm9mZnNldCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmVhZFU2NCgpIHtcbiAgICAgICAgY29uc3QgYnVmID0gdGhpcy5yZWFkQnVmZmVyKDgpO1xuICAgICAgICByZXR1cm4gbmV3IGJuX2pzXzEuZGVmYXVsdChidWYsIFwibGVcIik7XG4gICAgfVxuICAgIHJlYWRVMTI4KCkge1xuICAgICAgICBjb25zdCBidWYgPSB0aGlzLnJlYWRCdWZmZXIoMTYpO1xuICAgICAgICByZXR1cm4gbmV3IGJuX2pzXzEuZGVmYXVsdChidWYsIFwibGVcIik7XG4gICAgfVxuICAgIHJlYWRVMjU2KCkge1xuICAgICAgICBjb25zdCBidWYgPSB0aGlzLnJlYWRCdWZmZXIoMzIpO1xuICAgICAgICByZXR1cm4gbmV3IGJuX2pzXzEuZGVmYXVsdChidWYsIFwibGVcIik7XG4gICAgfVxuICAgIHJlYWRVNTEyKCkge1xuICAgICAgICBjb25zdCBidWYgPSB0aGlzLnJlYWRCdWZmZXIoNjQpO1xuICAgICAgICByZXR1cm4gbmV3IGJuX2pzXzEuZGVmYXVsdChidWYsIFwibGVcIik7XG4gICAgfVxuICAgIHJlYWRCdWZmZXIobGVuKSB7XG4gICAgICAgIGlmICh0aGlzLm9mZnNldCArIGxlbiA+IHRoaXMuYnVmLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEJvcnNoRXJyb3IoYEV4cGVjdGVkIGJ1ZmZlciBsZW5ndGggJHtsZW59IGlzbid0IHdpdGhpbiBib3VuZHNgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmJ1Zi5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKyBsZW4pO1xuICAgICAgICB0aGlzLm9mZnNldCArPSBsZW47XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJlYWRTdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IGxlbiA9IHRoaXMucmVhZFUzMigpO1xuICAgICAgICBjb25zdCBidWYgPSB0aGlzLnJlYWRCdWZmZXIobGVuKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIE5PVEU6IFVzaW5nIFRleHREZWNvZGVyIHRvIGZhaWwgb24gaW52YWxpZCBVVEYtOFxuICAgICAgICAgICAgcmV0dXJuIHRleHREZWNvZGVyLmRlY29kZShidWYpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQm9yc2hFcnJvcihgRXJyb3IgZGVjb2RpbmcgVVRGLTggc3RyaW5nOiAke2V9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVhZEZpeGVkQXJyYXkobGVuKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSh0aGlzLnJlYWRCdWZmZXIobGVuKSk7XG4gICAgfVxuICAgIHJlYWRBcnJheShmbikge1xuICAgICAgICBjb25zdCBsZW4gPSB0aGlzLnJlYWRVMzIoKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gQXJyYXkoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goZm4oKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5fX2RlY29yYXRlKFtcbiAgICBoYW5kbGluZ1JhbmdlRXJyb3Jcbl0sIEJpbmFyeVJlYWRlci5wcm90b3R5cGUsIFwicmVhZFU4XCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgaGFuZGxpbmdSYW5nZUVycm9yXG5dLCBCaW5hcnlSZWFkZXIucHJvdG90eXBlLCBcInJlYWRVMTZcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBoYW5kbGluZ1JhbmdlRXJyb3Jcbl0sIEJpbmFyeVJlYWRlci5wcm90b3R5cGUsIFwicmVhZFUzMlwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIGhhbmRsaW5nUmFuZ2VFcnJvclxuXSwgQmluYXJ5UmVhZGVyLnByb3RvdHlwZSwgXCJyZWFkVTY0XCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgaGFuZGxpbmdSYW5nZUVycm9yXG5dLCBCaW5hcnlSZWFkZXIucHJvdG90eXBlLCBcInJlYWRVMTI4XCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgaGFuZGxpbmdSYW5nZUVycm9yXG5dLCBCaW5hcnlSZWFkZXIucHJvdG90eXBlLCBcInJlYWRVMjU2XCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgaGFuZGxpbmdSYW5nZUVycm9yXG5dLCBCaW5hcnlSZWFkZXIucHJvdG90eXBlLCBcInJlYWRVNTEyXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgaGFuZGxpbmdSYW5nZUVycm9yXG5dLCBCaW5hcnlSZWFkZXIucHJvdG90eXBlLCBcInJlYWRTdHJpbmdcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBoYW5kbGluZ1JhbmdlRXJyb3Jcbl0sIEJpbmFyeVJlYWRlci5wcm90b3R5cGUsIFwicmVhZEZpeGVkQXJyYXlcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBoYW5kbGluZ1JhbmdlRXJyb3Jcbl0sIEJpbmFyeVJlYWRlci5wcm90b3R5cGUsIFwicmVhZEFycmF5XCIsIG51bGwpO1xuZXhwb3J0cy5CaW5hcnlSZWFkZXIgPSBCaW5hcnlSZWFkZXI7XG5mdW5jdGlvbiBjYXBpdGFsaXplRmlyc3RMZXR0ZXIoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZUZpZWxkKHNjaGVtYSwgZmllbGROYW1lLCB2YWx1ZSwgZmllbGRUeXBlLCB3cml0ZXIpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBUT0RPOiBIYW5kbGUgbWlzc2luZyB2YWx1ZXMgcHJvcGVybHkgKG1ha2Ugc3VyZSB0aGV5IG5ldmVyIHJlc3VsdCBpbiBqdXN0IHNraXBwZWQgd3JpdGUpXG4gICAgICAgIGlmICh0eXBlb2YgZmllbGRUeXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB3cml0ZXJbYHdyaXRlJHtjYXBpdGFsaXplRmlyc3RMZXR0ZXIoZmllbGRUeXBlKX1gXSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZmllbGRUeXBlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZmllbGRUeXBlWzBdID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCAhPT0gZmllbGRUeXBlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBCb3JzaEVycm9yKGBFeHBlY3RpbmcgYnl0ZSBhcnJheSBvZiBsZW5ndGggJHtmaWVsZFR5cGVbMF19LCBidXQgZ290ICR7dmFsdWUubGVuZ3RofSBieXRlc2ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3cml0ZXIud3JpdGVGaXhlZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGZpZWxkVHlwZS5sZW5ndGggPT09IDIgJiYgdHlwZW9mIGZpZWxkVHlwZVsxXSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggIT09IGZpZWxkVHlwZVsxXSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQm9yc2hFcnJvcihgRXhwZWN0aW5nIGJ5dGUgYXJyYXkgb2YgbGVuZ3RoICR7ZmllbGRUeXBlWzFdfSwgYnV0IGdvdCAke3ZhbHVlLmxlbmd0aH0gYnl0ZXNgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZFR5cGVbMV07IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBzZXJpYWxpemVGaWVsZChzY2hlbWEsIG51bGwsIHZhbHVlW2ldLCBmaWVsZFR5cGVbMF0sIHdyaXRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgd3JpdGVyLndyaXRlQXJyYXkodmFsdWUsIChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlcmlhbGl6ZUZpZWxkKHNjaGVtYSwgZmllbGROYW1lLCBpdGVtLCBmaWVsZFR5cGVbMF0sIHdyaXRlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZmllbGRUeXBlLmtpbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZFR5cGUua2luZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJvcHRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVyLndyaXRlVTgoMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZXIud3JpdGVVOCgxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcmlhbGl6ZUZpZWxkKHNjaGVtYSwgZmllbGROYW1lLCB2YWx1ZSwgZmllbGRUeXBlLnR5cGUsIHdyaXRlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgXCJtYXBcIjoge1xuICAgICAgICAgICAgICAgICAgICB3cml0ZXIud3JpdGVVMzIodmFsdWUuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLmZvckVhY2goKHZhbCwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJpYWxpemVGaWVsZChzY2hlbWEsIGZpZWxkTmFtZSwga2V5LCBmaWVsZFR5cGUua2V5LCB3cml0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWFsaXplRmllbGQoc2NoZW1hLCBmaWVsZE5hbWUsIHZhbCwgZmllbGRUeXBlLnZhbHVlLCB3cml0ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBCb3JzaEVycm9yKGBGaWVsZFR5cGUgJHtmaWVsZFR5cGV9IHVucmVjb2duaXplZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2VyaWFsaXplU3RydWN0KHNjaGVtYSwgdmFsdWUsIHdyaXRlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEJvcnNoRXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yLmFkZFRvRmllbGRQYXRoKGZpZWxkTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufVxuZnVuY3Rpb24gc2VyaWFsaXplU3RydWN0KHNjaGVtYSwgb2JqLCB3cml0ZXIpIHtcbiAgICBpZiAodHlwZW9mIG9iai5ib3JzaFNlcmlhbGl6ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIG9iai5ib3JzaFNlcmlhbGl6ZSh3cml0ZXIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHN0cnVjdFNjaGVtYSA9IHNjaGVtYS5nZXQob2JqLmNvbnN0cnVjdG9yKTtcbiAgICBpZiAoIXN0cnVjdFNjaGVtYSkge1xuICAgICAgICB0aHJvdyBuZXcgQm9yc2hFcnJvcihgQ2xhc3MgJHtvYmouY29uc3RydWN0b3IubmFtZX0gaXMgbWlzc2luZyBpbiBzY2hlbWFgKTtcbiAgICB9XG4gICAgaWYgKHN0cnVjdFNjaGVtYS5raW5kID09PSBcInN0cnVjdFwiKSB7XG4gICAgICAgIHN0cnVjdFNjaGVtYS5maWVsZHMubWFwKChbZmllbGROYW1lLCBmaWVsZFR5cGVdKSA9PiB7XG4gICAgICAgICAgICBzZXJpYWxpemVGaWVsZChzY2hlbWEsIGZpZWxkTmFtZSwgb2JqW2ZpZWxkTmFtZV0sIGZpZWxkVHlwZSwgd3JpdGVyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHN0cnVjdFNjaGVtYS5raW5kID09PSBcImVudW1cIikge1xuICAgICAgICBjb25zdCBuYW1lID0gb2JqW3N0cnVjdFNjaGVtYS5maWVsZF07XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHN0cnVjdFNjaGVtYS52YWx1ZXMubGVuZ3RoOyArK2lkeCkge1xuICAgICAgICAgICAgY29uc3QgW2ZpZWxkTmFtZSwgZmllbGRUeXBlXSA9IHN0cnVjdFNjaGVtYS52YWx1ZXNbaWR4XTtcbiAgICAgICAgICAgIGlmIChmaWVsZE5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICB3cml0ZXIud3JpdGVVOChpZHgpO1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZUZpZWxkKHNjaGVtYSwgZmllbGROYW1lLCBvYmpbZmllbGROYW1lXSwgZmllbGRUeXBlLCB3cml0ZXIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgQm9yc2hFcnJvcihgVW5leHBlY3RlZCBzY2hlbWEga2luZDogJHtzdHJ1Y3RTY2hlbWEua2luZH0gZm9yICR7b2JqLmNvbnN0cnVjdG9yLm5hbWV9YCk7XG4gICAgfVxufVxuLy8vIFNlcmlhbGl6ZSBnaXZlbiBvYmplY3QgdXNpbmcgc2NoZW1hIG9mIHRoZSBmb3JtOlxuLy8vIHsgY2xhc3NfbmFtZSAtPiBbIFtmaWVsZF9uYW1lLCBmaWVsZF90eXBlXSwgLi4gXSwgLi4gfVxuZnVuY3Rpb24gc2VyaWFsaXplKHNjaGVtYSwgb2JqLCBXcml0ZXIgPSBCaW5hcnlXcml0ZXIpIHtcbiAgICBjb25zdCB3cml0ZXIgPSBuZXcgV3JpdGVyKCk7XG4gICAgc2VyaWFsaXplU3RydWN0KHNjaGVtYSwgb2JqLCB3cml0ZXIpO1xuICAgIHJldHVybiB3cml0ZXIudG9BcnJheSgpO1xufVxuZXhwb3J0cy5zZXJpYWxpemUgPSBzZXJpYWxpemU7XG5mdW5jdGlvbiBkZXNlcmlhbGl6ZUZpZWxkKHNjaGVtYSwgZmllbGROYW1lLCBmaWVsZFR5cGUsIHJlYWRlcikge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmllbGRUeXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyW2ByZWFkJHtjYXBpdGFsaXplRmlyc3RMZXR0ZXIoZmllbGRUeXBlKX1gXSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaWVsZFR5cGUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBmaWVsZFR5cGVbMF0gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVhZGVyLnJlYWRGaXhlZEFycmF5KGZpZWxkVHlwZVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZmllbGRUeXBlWzFdID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJyID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZFR5cGVbMV07IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBhcnIucHVzaChkZXNlcmlhbGl6ZUZpZWxkKHNjaGVtYSwgbnVsbCwgZmllbGRUeXBlWzBdLCByZWFkZXIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIucmVhZEFycmF5KCgpID0+IGRlc2VyaWFsaXplRmllbGQoc2NoZW1hLCBmaWVsZE5hbWUsIGZpZWxkVHlwZVswXSwgcmVhZGVyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpZWxkVHlwZS5raW5kID09PSBcIm9wdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb24gPSByZWFkZXIucmVhZFU4KCk7XG4gICAgICAgICAgICBpZiAob3B0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlc2VyaWFsaXplRmllbGQoc2NoZW1hLCBmaWVsZE5hbWUsIGZpZWxkVHlwZS50eXBlLCByZWFkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmllbGRUeXBlLmtpbmQgPT09IFwibWFwXCIpIHtcbiAgICAgICAgICAgIGxldCBtYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSByZWFkZXIucmVhZFUzMigpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGRlc2VyaWFsaXplRmllbGQoc2NoZW1hLCBmaWVsZE5hbWUsIGZpZWxkVHlwZS5rZXksIHJlYWRlcik7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsID0gZGVzZXJpYWxpemVGaWVsZChzY2hlbWEsIGZpZWxkTmFtZSwgZmllbGRUeXBlLnZhbHVlLCByZWFkZXIpO1xuICAgICAgICAgICAgICAgIG1hcC5zZXQoa2V5LCB2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVzZXJpYWxpemVTdHJ1Y3Qoc2NoZW1hLCBmaWVsZFR5cGUsIHJlYWRlcik7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBCb3JzaEVycm9yKSB7XG4gICAgICAgICAgICBlcnJvci5hZGRUb0ZpZWxkUGF0aChmaWVsZE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlc2VyaWFsaXplU3RydWN0KHNjaGVtYSwgY2xhc3NUeXBlLCByZWFkZXIpIHtcbiAgICBpZiAodHlwZW9mIGNsYXNzVHlwZS5ib3JzaERlc2VyaWFsaXplID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGNsYXNzVHlwZS5ib3JzaERlc2VyaWFsaXplKHJlYWRlcik7XG4gICAgfVxuICAgIGNvbnN0IHN0cnVjdFNjaGVtYSA9IHNjaGVtYS5nZXQoY2xhc3NUeXBlKTtcbiAgICBpZiAoIXN0cnVjdFNjaGVtYSkge1xuICAgICAgICB0aHJvdyBuZXcgQm9yc2hFcnJvcihgQ2xhc3MgJHtjbGFzc1R5cGUubmFtZX0gaXMgbWlzc2luZyBpbiBzY2hlbWFgKTtcbiAgICB9XG4gICAgaWYgKHN0cnVjdFNjaGVtYS5raW5kID09PSBcInN0cnVjdFwiKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IFtmaWVsZE5hbWUsIGZpZWxkVHlwZV0gb2Ygc2NoZW1hLmdldChjbGFzc1R5cGUpLmZpZWxkcykge1xuICAgICAgICAgICAgcmVzdWx0W2ZpZWxkTmFtZV0gPSBkZXNlcmlhbGl6ZUZpZWxkKHNjaGVtYSwgZmllbGROYW1lLCBmaWVsZFR5cGUsIHJlYWRlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBjbGFzc1R5cGUocmVzdWx0KTtcbiAgICB9XG4gICAgaWYgKHN0cnVjdFNjaGVtYS5raW5kID09PSBcImVudW1cIikge1xuICAgICAgICBjb25zdCBpZHggPSByZWFkZXIucmVhZFU4KCk7XG4gICAgICAgIGlmIChpZHggPj0gc3RydWN0U2NoZW1hLnZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBCb3JzaEVycm9yKGBFbnVtIGluZGV4OiAke2lkeH0gaXMgb3V0IG9mIHJhbmdlYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgW2ZpZWxkTmFtZSwgZmllbGRUeXBlXSA9IHN0cnVjdFNjaGVtYS52YWx1ZXNbaWR4XTtcbiAgICAgICAgY29uc3QgZmllbGRWYWx1ZSA9IGRlc2VyaWFsaXplRmllbGQoc2NoZW1hLCBmaWVsZE5hbWUsIGZpZWxkVHlwZSwgcmVhZGVyKTtcbiAgICAgICAgcmV0dXJuIG5ldyBjbGFzc1R5cGUoeyBbZmllbGROYW1lXTogZmllbGRWYWx1ZSB9KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEJvcnNoRXJyb3IoYFVuZXhwZWN0ZWQgc2NoZW1hIGtpbmQ6ICR7c3RydWN0U2NoZW1hLmtpbmR9IGZvciAke2NsYXNzVHlwZS5jb25zdHJ1Y3Rvci5uYW1lfWApO1xufVxuLy8vIERlc2VyaWFsaXplcyBvYmplY3QgZnJvbSBieXRlcyB1c2luZyBzY2hlbWEuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZShzY2hlbWEsIGNsYXNzVHlwZSwgYnVmZmVyLCBSZWFkZXIgPSBCaW5hcnlSZWFkZXIpIHtcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgUmVhZGVyKGJ1ZmZlcik7XG4gICAgY29uc3QgcmVzdWx0ID0gZGVzZXJpYWxpemVTdHJ1Y3Qoc2NoZW1hLCBjbGFzc1R5cGUsIHJlYWRlcik7XG4gICAgaWYgKHJlYWRlci5vZmZzZXQgPCBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBCb3JzaEVycm9yKGBVbmV4cGVjdGVkICR7YnVmZmVyLmxlbmd0aCAtIHJlYWRlci5vZmZzZXR9IGJ5dGVzIGFmdGVyIGRlc2VyaWFsaXplZCBkYXRhYCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmRlc2VyaWFsaXplID0gZGVzZXJpYWxpemU7XG4vLy8gRGVzZXJpYWxpemVzIG9iamVjdCBmcm9tIGJ5dGVzIHVzaW5nIHNjaGVtYSwgd2l0aG91dCBjaGVja2luZyB0aGUgbGVuZ3RoIHJlYWRcbmZ1bmN0aW9uIGRlc2VyaWFsaXplVW5jaGVja2VkKHNjaGVtYSwgY2xhc3NUeXBlLCBidWZmZXIsIFJlYWRlciA9IEJpbmFyeVJlYWRlcikge1xuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBSZWFkZXIoYnVmZmVyKTtcbiAgICByZXR1cm4gZGVzZXJpYWxpemVTdHJ1Y3Qoc2NoZW1hLCBjbGFzc1R5cGUsIHJlYWRlcik7XG59XG5leHBvcnRzLmRlc2VyaWFsaXplVW5jaGVja2VkID0gZGVzZXJpYWxpemVVbmNoZWNrZWQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/node_modules/borsh/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_app_core/theme/constants_theme.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_app_core/theme/constants_theme.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.THEME_SMALL_WINDOW_WIDTH_MAX = exports.THEME_CONSTANT_BADGE_GREY_COLOR = exports.THEME_CONSTANT_GREEN_COLOR = exports.THEME_CONSTANT_RED_COLOR = exports.THEME_CONSTANT_COLOR_DARK = exports.THEME_CONSTANT_COLOR_BRAND = exports.SIGN_POPUP_HEIGHT = exports.SIGN_POPUP_WIDTH = void 0;\r\nexports.SIGN_POPUP_WIDTH = 390;\r\nexports.SIGN_POPUP_HEIGHT = 650;\r\nexports.THEME_CONSTANT_COLOR_BRAND = \"#471be8\";\r\nexports.THEME_CONSTANT_COLOR_DARK = \"#101046\";\r\nexports.THEME_CONSTANT_RED_COLOR = \"#e25252\";\r\nexports.THEME_CONSTANT_GREEN_COLOR = \"#8bdaa1\";\r\nexports.THEME_CONSTANT_BADGE_GREY_COLOR = \"rgba(116,117,126,0.67)\";\r\nexports.THEME_SMALL_WINDOW_WIDTH_MAX = 600;\r\n//# sourceMappingURL=constants_theme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3ItY29tbW9uL3NyYy9tb2R1bGVzX2FwcF9jb3JlL3RoZW1lL2NvbnN0YW50c190aGVtZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQ0FBb0MsR0FBRyx1Q0FBdUMsR0FBRyxrQ0FBa0MsR0FBRyxnQ0FBZ0MsR0FBRyxpQ0FBaUMsR0FBRyxrQ0FBa0MsR0FBRyx5QkFBeUIsR0FBRyx3QkFBd0I7QUFDdFIsd0JBQXdCO0FBQ3hCLHlCQUF5QjtBQUN6QixrQ0FBa0M7QUFDbEMsaUNBQWlDO0FBQ2pDLGdDQUFnQztBQUNoQyxrQ0FBa0M7QUFDbEMsdUNBQXVDO0FBQ3ZDLG9DQUFvQztBQUNwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3ItY29tbW9uL3NyYy9tb2R1bGVzX2FwcF9jb3JlL3RoZW1lL2NvbnN0YW50c190aGVtZS5qcz80MTNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuVEhFTUVfU01BTExfV0lORE9XX1dJRFRIX01BWCA9IGV4cG9ydHMuVEhFTUVfQ09OU1RBTlRfQkFER0VfR1JFWV9DT0xPUiA9IGV4cG9ydHMuVEhFTUVfQ09OU1RBTlRfR1JFRU5fQ09MT1IgPSBleHBvcnRzLlRIRU1FX0NPTlNUQU5UX1JFRF9DT0xPUiA9IGV4cG9ydHMuVEhFTUVfQ09OU1RBTlRfQ09MT1JfREFSSyA9IGV4cG9ydHMuVEhFTUVfQ09OU1RBTlRfQ09MT1JfQlJBTkQgPSBleHBvcnRzLlNJR05fUE9QVVBfSEVJR0hUID0gZXhwb3J0cy5TSUdOX1BPUFVQX1dJRFRIID0gdm9pZCAwO1xyXG5leHBvcnRzLlNJR05fUE9QVVBfV0lEVEggPSAzOTA7XHJcbmV4cG9ydHMuU0lHTl9QT1BVUF9IRUlHSFQgPSA2NTA7XHJcbmV4cG9ydHMuVEhFTUVfQ09OU1RBTlRfQ09MT1JfQlJBTkQgPSBcIiM0NzFiZThcIjtcclxuZXhwb3J0cy5USEVNRV9DT05TVEFOVF9DT0xPUl9EQVJLID0gXCIjMTAxMDQ2XCI7XHJcbmV4cG9ydHMuVEhFTUVfQ09OU1RBTlRfUkVEX0NPTE9SID0gXCIjZTI1MjUyXCI7XHJcbmV4cG9ydHMuVEhFTUVfQ09OU1RBTlRfR1JFRU5fQ09MT1IgPSBcIiM4YmRhYTFcIjtcclxuZXhwb3J0cy5USEVNRV9DT05TVEFOVF9CQURHRV9HUkVZX0NPTE9SID0gXCJyZ2JhKDExNiwxMTcsMTI2LDAuNjcpXCI7XHJcbmV4cG9ydHMuVEhFTUVfU01BTExfV0lORE9XX1dJRFRIX01BWCA9IDYwMDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzX3RoZW1lLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_app_core/theme/constants_theme.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_external/near/types/near_basic_types.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_external/near/types/near_basic_types.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ENearNetworkSuffix = exports.ENearNetwork = void 0;\r\nvar ENearNetwork;\r\n(function (ENearNetwork) {\r\n    ENearNetwork[\"localnet\"] = \"localnet\";\r\n    ENearNetwork[\"testnet\"] = \"testnet\";\r\n    ENearNetwork[\"betanet\"] = \"betanet\";\r\n    ENearNetwork[\"mainnet\"] = \"mainnet\";\r\n})(ENearNetwork = exports.ENearNetwork || (exports.ENearNetwork = {}));\r\nvar ENearNetworkSuffix;\r\n(function (ENearNetworkSuffix) {\r\n    ENearNetworkSuffix[\"testnet\"] = \".testnet\";\r\n    ENearNetworkSuffix[\"mainnet\"] = \".near\";\r\n})(ENearNetworkSuffix = exports.ENearNetworkSuffix || (exports.ENearNetworkSuffix = {}));\r\n//# sourceMappingURL=near_basic_types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3ItY29tbW9uL3NyYy9tb2R1bGVzX2V4dGVybmFsL25lYXIvdHlwZXMvbmVhcl9iYXNpY190eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRyxvQkFBb0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQ0FBMEMsb0JBQW9CLEtBQUs7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNEQUFzRCwwQkFBMEIsS0FBSztBQUN0RiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3ItY29tbW9uL3NyYy9tb2R1bGVzX2V4dGVybmFsL25lYXIvdHlwZXMvbmVhcl9iYXNpY190eXBlcy5qcz81OTdmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuRU5lYXJOZXR3b3JrU3VmZml4ID0gZXhwb3J0cy5FTmVhck5ldHdvcmsgPSB2b2lkIDA7XHJcbnZhciBFTmVhck5ldHdvcms7XHJcbihmdW5jdGlvbiAoRU5lYXJOZXR3b3JrKSB7XHJcbiAgICBFTmVhck5ldHdvcmtbXCJsb2NhbG5ldFwiXSA9IFwibG9jYWxuZXRcIjtcclxuICAgIEVOZWFyTmV0d29ya1tcInRlc3RuZXRcIl0gPSBcInRlc3RuZXRcIjtcclxuICAgIEVOZWFyTmV0d29ya1tcImJldGFuZXRcIl0gPSBcImJldGFuZXRcIjtcclxuICAgIEVOZWFyTmV0d29ya1tcIm1haW5uZXRcIl0gPSBcIm1haW5uZXRcIjtcclxufSkoRU5lYXJOZXR3b3JrID0gZXhwb3J0cy5FTmVhck5ldHdvcmsgfHwgKGV4cG9ydHMuRU5lYXJOZXR3b3JrID0ge30pKTtcclxudmFyIEVOZWFyTmV0d29ya1N1ZmZpeDtcclxuKGZ1bmN0aW9uIChFTmVhck5ldHdvcmtTdWZmaXgpIHtcclxuICAgIEVOZWFyTmV0d29ya1N1ZmZpeFtcInRlc3RuZXRcIl0gPSBcIi50ZXN0bmV0XCI7XHJcbiAgICBFTmVhck5ldHdvcmtTdWZmaXhbXCJtYWlubmV0XCJdID0gXCIubmVhclwiO1xyXG59KShFTmVhck5ldHdvcmtTdWZmaXggPSBleHBvcnRzLkVOZWFyTmV0d29ya1N1ZmZpeCB8fCAoZXhwb3J0cy5FTmVhck5ldHdvcmtTdWZmaXggPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZWFyX2Jhc2ljX3R5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_external/near/types/near_basic_types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/error_handling_dappConnect.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/error_handling_dappConnect.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getExternalActionErrorMessageForEndTag = exports.EDappActionErrorTag = void 0;\r\nvar EDappActionErrorTag;\r\n(function (EDappActionErrorTag) {\r\n    EDappActionErrorTag[\"NEW_ACTION_STARTED\"] = \"NEW_ACTION_STARTED\";\r\n    EDappActionErrorTag[\"INCOMPLETE_ACTION\"] = \"INCOMPLETE_ACTION\";\r\n    EDappActionErrorTag[\"NO_ACCOUNTS\"] = \"NO_ACCOUNTS\";\r\n    EDappActionErrorTag[\"WINDOW_CLOSED\"] = \"WINDOW_CLOSED\";\r\n    EDappActionErrorTag[\"USER_CANCELLED\"] = \"USER_CANCELLED\";\r\n    EDappActionErrorTag[\"POPUP_WINDOW_REFUSED\"] = \"POPUP_WINDOW_REFUSED\";\r\n    EDappActionErrorTag[\"POPUP_WINDOW_OPEN_FAILED\"] = \"POPUP_WINDOW_OPEN_FAILED\";\r\n})(EDappActionErrorTag = exports.EDappActionErrorTag || (exports.EDappActionErrorTag = {}));\r\nconst en = {\r\n    [EDappActionErrorTag.WINDOW_CLOSED]: \"User closed the window\",\r\n    [EDappActionErrorTag.INCOMPLETE_ACTION]: \"User didn't complete the action\",\r\n    [EDappActionErrorTag.NEW_ACTION_STARTED]: \"A new action was started by the user, old action failed\",\r\n    [EDappActionErrorTag.POPUP_WINDOW_OPEN_FAILED]: \"Popup window failed to open\",\r\n    [EDappActionErrorTag.POPUP_WINDOW_REFUSED]: \"User refused to allow the popup window to open\",\r\n    [EDappActionErrorTag.USER_CANCELLED]: \"User cancelled the action\",\r\n    [EDappActionErrorTag.NO_ACCOUNTS]: \"No Meteor account found- try again after creating one\",\r\n};\r\nfunction getExternalActionErrorMessageForEndTag(tag) {\r\n    return en[tag] ?? \"An unknown error occurred\";\r\n}\r\nexports.getExternalActionErrorMessageForEndTag = getExternalActionErrorMessageForEndTag;\r\n//# sourceMappingURL=error_handling_dappConnect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3ItY29tbW9uL3NyYy9tb2R1bGVzX2ZlYXR1cmUvZGFwcF9jb25uZWN0L2Vycm9yX2hhbmRsaW5nX2RhcHBDb25uZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhDQUE4QyxHQUFHLDJCQUEyQjtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdEQUF3RCwyQkFBMkIsS0FBSztBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby1uZWFyLy4vbm9kZV9tb2R1bGVzL0BtZXRlb3J3YWxsZXQvc2RrL2Rpc3QvbWV0ZW9yLWNvbW1vbi9zcmMvbW9kdWxlc19mZWF0dXJlL2RhcHBfY29ubmVjdC9lcnJvcl9oYW5kbGluZ19kYXBwQ29ubmVjdC5qcz9lZTQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuZ2V0RXh0ZXJuYWxBY3Rpb25FcnJvck1lc3NhZ2VGb3JFbmRUYWcgPSBleHBvcnRzLkVEYXBwQWN0aW9uRXJyb3JUYWcgPSB2b2lkIDA7XHJcbnZhciBFRGFwcEFjdGlvbkVycm9yVGFnO1xyXG4oZnVuY3Rpb24gKEVEYXBwQWN0aW9uRXJyb3JUYWcpIHtcclxuICAgIEVEYXBwQWN0aW9uRXJyb3JUYWdbXCJORVdfQUNUSU9OX1NUQVJURURcIl0gPSBcIk5FV19BQ1RJT05fU1RBUlRFRFwiO1xyXG4gICAgRURhcHBBY3Rpb25FcnJvclRhZ1tcIklOQ09NUExFVEVfQUNUSU9OXCJdID0gXCJJTkNPTVBMRVRFX0FDVElPTlwiO1xyXG4gICAgRURhcHBBY3Rpb25FcnJvclRhZ1tcIk5PX0FDQ09VTlRTXCJdID0gXCJOT19BQ0NPVU5UU1wiO1xyXG4gICAgRURhcHBBY3Rpb25FcnJvclRhZ1tcIldJTkRPV19DTE9TRURcIl0gPSBcIldJTkRPV19DTE9TRURcIjtcclxuICAgIEVEYXBwQWN0aW9uRXJyb3JUYWdbXCJVU0VSX0NBTkNFTExFRFwiXSA9IFwiVVNFUl9DQU5DRUxMRURcIjtcclxuICAgIEVEYXBwQWN0aW9uRXJyb3JUYWdbXCJQT1BVUF9XSU5ET1dfUkVGVVNFRFwiXSA9IFwiUE9QVVBfV0lORE9XX1JFRlVTRURcIjtcclxuICAgIEVEYXBwQWN0aW9uRXJyb3JUYWdbXCJQT1BVUF9XSU5ET1dfT1BFTl9GQUlMRURcIl0gPSBcIlBPUFVQX1dJTkRPV19PUEVOX0ZBSUxFRFwiO1xyXG59KShFRGFwcEFjdGlvbkVycm9yVGFnID0gZXhwb3J0cy5FRGFwcEFjdGlvbkVycm9yVGFnIHx8IChleHBvcnRzLkVEYXBwQWN0aW9uRXJyb3JUYWcgPSB7fSkpO1xyXG5jb25zdCBlbiA9IHtcclxuICAgIFtFRGFwcEFjdGlvbkVycm9yVGFnLldJTkRPV19DTE9TRURdOiBcIlVzZXIgY2xvc2VkIHRoZSB3aW5kb3dcIixcclxuICAgIFtFRGFwcEFjdGlvbkVycm9yVGFnLklOQ09NUExFVEVfQUNUSU9OXTogXCJVc2VyIGRpZG4ndCBjb21wbGV0ZSB0aGUgYWN0aW9uXCIsXHJcbiAgICBbRURhcHBBY3Rpb25FcnJvclRhZy5ORVdfQUNUSU9OX1NUQVJURURdOiBcIkEgbmV3IGFjdGlvbiB3YXMgc3RhcnRlZCBieSB0aGUgdXNlciwgb2xkIGFjdGlvbiBmYWlsZWRcIixcclxuICAgIFtFRGFwcEFjdGlvbkVycm9yVGFnLlBPUFVQX1dJTkRPV19PUEVOX0ZBSUxFRF06IFwiUG9wdXAgd2luZG93IGZhaWxlZCB0byBvcGVuXCIsXHJcbiAgICBbRURhcHBBY3Rpb25FcnJvclRhZy5QT1BVUF9XSU5ET1dfUkVGVVNFRF06IFwiVXNlciByZWZ1c2VkIHRvIGFsbG93IHRoZSBwb3B1cCB3aW5kb3cgdG8gb3BlblwiLFxyXG4gICAgW0VEYXBwQWN0aW9uRXJyb3JUYWcuVVNFUl9DQU5DRUxMRURdOiBcIlVzZXIgY2FuY2VsbGVkIHRoZSBhY3Rpb25cIixcclxuICAgIFtFRGFwcEFjdGlvbkVycm9yVGFnLk5PX0FDQ09VTlRTXTogXCJObyBNZXRlb3IgYWNjb3VudCBmb3VuZC0gdHJ5IGFnYWluIGFmdGVyIGNyZWF0aW5nIG9uZVwiLFxyXG59O1xyXG5mdW5jdGlvbiBnZXRFeHRlcm5hbEFjdGlvbkVycm9yTWVzc2FnZUZvckVuZFRhZyh0YWcpIHtcclxuICAgIHJldHVybiBlblt0YWddID8/IFwiQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZFwiO1xyXG59XHJcbmV4cG9ydHMuZ2V0RXh0ZXJuYWxBY3Rpb25FcnJvck1lc3NhZ2VGb3JFbmRUYWcgPSBnZXRFeHRlcm5hbEFjdGlvbkVycm9yTWVzc2FnZUZvckVuZFRhZztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JfaGFuZGxpbmdfZGFwcENvbm5lY3QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/error_handling_dappConnect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/types_dappConnect.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/types_dappConnect.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.EDappActionConnectionStatus = exports.EDappActionSource = exports.EMeteorInjectedFeature = exports.EMeteorExtensionDirectActionType = exports.EWalletExternalActionStatus = exports.EWalletExternalAction_SignIn_AccessType = exports.EMeteorWalletSignInType = exports.EExternalActionType = exports.MeteorActionError = void 0;\r\nconst error_handling_dappConnect_1 = __webpack_require__(/*! ./error_handling_dappConnect */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/error_handling_dappConnect.js\");\r\nclass MeteorActionError extends Error {\r\n    constructor(reason, previousError) {\r\n        super();\r\n        if (reason.message == null) {\r\n            reason.message = (0, error_handling_dappConnect_1.getExternalActionErrorMessageForEndTag)(reason.endTags?.[reason.endTags.length - 1] ?? \"unknown\");\r\n        }\r\n        this._reason = reason;\r\n        this.message = reason.message;\r\n        this.name = \"MeteorActionError\";\r\n        this.cause = previousError;\r\n    }\r\n}\r\nexports.MeteorActionError = MeteorActionError;\r\nvar EExternalActionType;\r\n(function (EExternalActionType) {\r\n    EExternalActionType[\"login\"] = \"login\";\r\n    EExternalActionType[\"sign\"] = \"sign\";\r\n    EExternalActionType[\"logout\"] = \"logout\";\r\n    EExternalActionType[\"verify_owner\"] = \"verify_owner\";\r\n    EExternalActionType[\"keypom_claim\"] = \"keypom_claim\";\r\n    EExternalActionType[\"sign_message\"] = \"sign_message\";\r\n})(EExternalActionType = exports.EExternalActionType || (exports.EExternalActionType = {}));\r\nvar EMeteorWalletSignInType;\r\n(function (EMeteorWalletSignInType) {\r\n    EMeteorWalletSignInType[\"ALL_METHODS\"] = \"ALL_METHODS\";\r\n    EMeteorWalletSignInType[\"SELECTED_METHODS\"] = \"SELECTED_METHODS\";\r\n    EMeteorWalletSignInType[\"FULL_ACCESS\"] = \"FULL_ACCESS\";\r\n})(EMeteorWalletSignInType = exports.EMeteorWalletSignInType || (exports.EMeteorWalletSignInType = {}));\r\nvar EWalletExternalAction_SignIn_AccessType;\r\n(function (EWalletExternalAction_SignIn_AccessType) {\r\n    EWalletExternalAction_SignIn_AccessType[\"FULL_ACCESS\"] = \"fullAccess\";\r\n    EWalletExternalAction_SignIn_AccessType[\"LIMITED_ACCESS\"] = \"limitedAccess\";\r\n})(EWalletExternalAction_SignIn_AccessType = exports.EWalletExternalAction_SignIn_AccessType || (exports.EWalletExternalAction_SignIn_AccessType = {}));\r\nvar EWalletExternalActionStatus;\r\n(function (EWalletExternalActionStatus) {\r\n    EWalletExternalActionStatus[\"UNCONFIRMED\"] = \"UNCONFIRMED\";\r\n    EWalletExternalActionStatus[\"PENDING\"] = \"PENDING\";\r\n    EWalletExternalActionStatus[\"SUCCESS\"] = \"SUCCESS\";\r\n    EWalletExternalActionStatus[\"FAILURE\"] = \"FAILURE\";\r\n})(EWalletExternalActionStatus = exports.EWalletExternalActionStatus || (exports.EWalletExternalActionStatus = {}));\r\nvar EMeteorExtensionDirectActionType;\r\n(function (EMeteorExtensionDirectActionType) {\r\n    EMeteorExtensionDirectActionType[\"check_sync_status\"] = \"check_sync_status\";\r\n    EMeteorExtensionDirectActionType[\"sync_accounts\"] = \"sync_accounts\";\r\n    EMeteorExtensionDirectActionType[\"open_page\"] = \"open_page\";\r\n})(EMeteorExtensionDirectActionType = exports.EMeteorExtensionDirectActionType || (exports.EMeteorExtensionDirectActionType = {}));\r\nvar EMeteorInjectedFeature;\r\n(function (EMeteorInjectedFeature) {\r\n    EMeteorInjectedFeature[\"open_page\"] = \"open_page\";\r\n    EMeteorInjectedFeature[\"batch_import\"] = \"batch_import\";\r\n    EMeteorInjectedFeature[\"sync_check\"] = \"sync_check\";\r\n    EMeteorInjectedFeature[\"account_sync\"] = \"account_sync\";\r\n})(EMeteorInjectedFeature = exports.EMeteorInjectedFeature || (exports.EMeteorInjectedFeature = {}));\r\nvar EDappActionSource;\r\n(function (EDappActionSource) {\r\n    EDappActionSource[\"website_callback\"] = \"wcb\";\r\n    EDappActionSource[\"website_post_message\"] = \"wpm\";\r\n    EDappActionSource[\"website_visit\"] = \"wv\";\r\n    EDappActionSource[\"extension_injected\"] = \"ext\";\r\n})(EDappActionSource = exports.EDappActionSource || (exports.EDappActionSource = {}));\r\nvar EDappActionConnectionStatus;\r\n(function (EDappActionConnectionStatus) {\r\n    EDappActionConnectionStatus[\"initializing\"] = \"initializing\";\r\n    EDappActionConnectionStatus[\"connected\"] = \"connected\";\r\n    EDappActionConnectionStatus[\"attempting_reconnect\"] = \"attempting_reconnect\";\r\n    EDappActionConnectionStatus[\"disconnected\"] = \"disconnected\";\r\n    EDappActionConnectionStatus[\"closed_success\"] = \"closed_success\";\r\n    EDappActionConnectionStatus[\"closed_fail\"] = \"closed_fail\";\r\n    EDappActionConnectionStatus[\"closed_window\"] = \"closed_window\";\r\n})(EDappActionConnectionStatus = exports.EDappActionConnectionStatus || (exports.EDappActionConnectionStatus = {}));\r\n//# sourceMappingURL=types_dappConnect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3ItY29tbW9uL3NyYy9tb2R1bGVzX2ZlYXR1cmUvZGFwcF9jb25uZWN0L3R5cGVzX2RhcHBDb25uZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1DQUFtQyxHQUFHLHlCQUF5QixHQUFHLDhCQUE4QixHQUFHLHdDQUF3QyxHQUFHLG1DQUFtQyxHQUFHLCtDQUErQyxHQUFHLCtCQUErQixHQUFHLDJCQUEyQixHQUFHLHlCQUF5QjtBQUMvVCxxQ0FBcUMsbUJBQU8sQ0FBQyw4SkFBOEI7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdEQUF3RCwyQkFBMkIsS0FBSztBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnRUFBZ0UsK0JBQStCLEtBQUs7QUFDckc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdHQUFnRywrQ0FBK0MsS0FBSztBQUNySjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdFQUF3RSxtQ0FBbUMsS0FBSztBQUNqSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrRkFBa0Ysd0NBQXdDLEtBQUs7QUFDaEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4REFBOEQsOEJBQThCLEtBQUs7QUFDbEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvREFBb0QseUJBQXlCLEtBQUs7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3RUFBd0UsbUNBQW1DLEtBQUs7QUFDakgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby1uZWFyLy4vbm9kZV9tb2R1bGVzL0BtZXRlb3J3YWxsZXQvc2RrL2Rpc3QvbWV0ZW9yLWNvbW1vbi9zcmMvbW9kdWxlc19mZWF0dXJlL2RhcHBfY29ubmVjdC90eXBlc19kYXBwQ29ubmVjdC5qcz8wODE3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuRURhcHBBY3Rpb25Db25uZWN0aW9uU3RhdHVzID0gZXhwb3J0cy5FRGFwcEFjdGlvblNvdXJjZSA9IGV4cG9ydHMuRU1ldGVvckluamVjdGVkRmVhdHVyZSA9IGV4cG9ydHMuRU1ldGVvckV4dGVuc2lvbkRpcmVjdEFjdGlvblR5cGUgPSBleHBvcnRzLkVXYWxsZXRFeHRlcm5hbEFjdGlvblN0YXR1cyA9IGV4cG9ydHMuRVdhbGxldEV4dGVybmFsQWN0aW9uX1NpZ25Jbl9BY2Nlc3NUeXBlID0gZXhwb3J0cy5FTWV0ZW9yV2FsbGV0U2lnbkluVHlwZSA9IGV4cG9ydHMuRUV4dGVybmFsQWN0aW9uVHlwZSA9IGV4cG9ydHMuTWV0ZW9yQWN0aW9uRXJyb3IgPSB2b2lkIDA7XHJcbmNvbnN0IGVycm9yX2hhbmRsaW5nX2RhcHBDb25uZWN0XzEgPSByZXF1aXJlKFwiLi9lcnJvcl9oYW5kbGluZ19kYXBwQ29ubmVjdFwiKTtcclxuY2xhc3MgTWV0ZW9yQWN0aW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihyZWFzb24sIHByZXZpb3VzRXJyb3IpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIGlmIChyZWFzb24ubWVzc2FnZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlYXNvbi5tZXNzYWdlID0gKDAsIGVycm9yX2hhbmRsaW5nX2RhcHBDb25uZWN0XzEuZ2V0RXh0ZXJuYWxBY3Rpb25FcnJvck1lc3NhZ2VGb3JFbmRUYWcpKHJlYXNvbi5lbmRUYWdzPy5bcmVhc29uLmVuZFRhZ3MubGVuZ3RoIC0gMV0gPz8gXCJ1bmtub3duXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9yZWFzb24gPSByZWFzb247XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gcmVhc29uLm1lc3NhZ2U7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJNZXRlb3JBY3Rpb25FcnJvclwiO1xyXG4gICAgICAgIHRoaXMuY2F1c2UgPSBwcmV2aW91c0Vycm9yO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTWV0ZW9yQWN0aW9uRXJyb3IgPSBNZXRlb3JBY3Rpb25FcnJvcjtcclxudmFyIEVFeHRlcm5hbEFjdGlvblR5cGU7XHJcbihmdW5jdGlvbiAoRUV4dGVybmFsQWN0aW9uVHlwZSkge1xyXG4gICAgRUV4dGVybmFsQWN0aW9uVHlwZVtcImxvZ2luXCJdID0gXCJsb2dpblwiO1xyXG4gICAgRUV4dGVybmFsQWN0aW9uVHlwZVtcInNpZ25cIl0gPSBcInNpZ25cIjtcclxuICAgIEVFeHRlcm5hbEFjdGlvblR5cGVbXCJsb2dvdXRcIl0gPSBcImxvZ291dFwiO1xyXG4gICAgRUV4dGVybmFsQWN0aW9uVHlwZVtcInZlcmlmeV9vd25lclwiXSA9IFwidmVyaWZ5X293bmVyXCI7XHJcbiAgICBFRXh0ZXJuYWxBY3Rpb25UeXBlW1wia2V5cG9tX2NsYWltXCJdID0gXCJrZXlwb21fY2xhaW1cIjtcclxuICAgIEVFeHRlcm5hbEFjdGlvblR5cGVbXCJzaWduX21lc3NhZ2VcIl0gPSBcInNpZ25fbWVzc2FnZVwiO1xyXG59KShFRXh0ZXJuYWxBY3Rpb25UeXBlID0gZXhwb3J0cy5FRXh0ZXJuYWxBY3Rpb25UeXBlIHx8IChleHBvcnRzLkVFeHRlcm5hbEFjdGlvblR5cGUgPSB7fSkpO1xyXG52YXIgRU1ldGVvcldhbGxldFNpZ25JblR5cGU7XHJcbihmdW5jdGlvbiAoRU1ldGVvcldhbGxldFNpZ25JblR5cGUpIHtcclxuICAgIEVNZXRlb3JXYWxsZXRTaWduSW5UeXBlW1wiQUxMX01FVEhPRFNcIl0gPSBcIkFMTF9NRVRIT0RTXCI7XHJcbiAgICBFTWV0ZW9yV2FsbGV0U2lnbkluVHlwZVtcIlNFTEVDVEVEX01FVEhPRFNcIl0gPSBcIlNFTEVDVEVEX01FVEhPRFNcIjtcclxuICAgIEVNZXRlb3JXYWxsZXRTaWduSW5UeXBlW1wiRlVMTF9BQ0NFU1NcIl0gPSBcIkZVTExfQUNDRVNTXCI7XHJcbn0pKEVNZXRlb3JXYWxsZXRTaWduSW5UeXBlID0gZXhwb3J0cy5FTWV0ZW9yV2FsbGV0U2lnbkluVHlwZSB8fCAoZXhwb3J0cy5FTWV0ZW9yV2FsbGV0U2lnbkluVHlwZSA9IHt9KSk7XHJcbnZhciBFV2FsbGV0RXh0ZXJuYWxBY3Rpb25fU2lnbkluX0FjY2Vzc1R5cGU7XHJcbihmdW5jdGlvbiAoRVdhbGxldEV4dGVybmFsQWN0aW9uX1NpZ25Jbl9BY2Nlc3NUeXBlKSB7XHJcbiAgICBFV2FsbGV0RXh0ZXJuYWxBY3Rpb25fU2lnbkluX0FjY2Vzc1R5cGVbXCJGVUxMX0FDQ0VTU1wiXSA9IFwiZnVsbEFjY2Vzc1wiO1xyXG4gICAgRVdhbGxldEV4dGVybmFsQWN0aW9uX1NpZ25Jbl9BY2Nlc3NUeXBlW1wiTElNSVRFRF9BQ0NFU1NcIl0gPSBcImxpbWl0ZWRBY2Nlc3NcIjtcclxufSkoRVdhbGxldEV4dGVybmFsQWN0aW9uX1NpZ25Jbl9BY2Nlc3NUeXBlID0gZXhwb3J0cy5FV2FsbGV0RXh0ZXJuYWxBY3Rpb25fU2lnbkluX0FjY2Vzc1R5cGUgfHwgKGV4cG9ydHMuRVdhbGxldEV4dGVybmFsQWN0aW9uX1NpZ25Jbl9BY2Nlc3NUeXBlID0ge30pKTtcclxudmFyIEVXYWxsZXRFeHRlcm5hbEFjdGlvblN0YXR1cztcclxuKGZ1bmN0aW9uIChFV2FsbGV0RXh0ZXJuYWxBY3Rpb25TdGF0dXMpIHtcclxuICAgIEVXYWxsZXRFeHRlcm5hbEFjdGlvblN0YXR1c1tcIlVOQ09ORklSTUVEXCJdID0gXCJVTkNPTkZJUk1FRFwiO1xyXG4gICAgRVdhbGxldEV4dGVybmFsQWN0aW9uU3RhdHVzW1wiUEVORElOR1wiXSA9IFwiUEVORElOR1wiO1xyXG4gICAgRVdhbGxldEV4dGVybmFsQWN0aW9uU3RhdHVzW1wiU1VDQ0VTU1wiXSA9IFwiU1VDQ0VTU1wiO1xyXG4gICAgRVdhbGxldEV4dGVybmFsQWN0aW9uU3RhdHVzW1wiRkFJTFVSRVwiXSA9IFwiRkFJTFVSRVwiO1xyXG59KShFV2FsbGV0RXh0ZXJuYWxBY3Rpb25TdGF0dXMgPSBleHBvcnRzLkVXYWxsZXRFeHRlcm5hbEFjdGlvblN0YXR1cyB8fCAoZXhwb3J0cy5FV2FsbGV0RXh0ZXJuYWxBY3Rpb25TdGF0dXMgPSB7fSkpO1xyXG52YXIgRU1ldGVvckV4dGVuc2lvbkRpcmVjdEFjdGlvblR5cGU7XHJcbihmdW5jdGlvbiAoRU1ldGVvckV4dGVuc2lvbkRpcmVjdEFjdGlvblR5cGUpIHtcclxuICAgIEVNZXRlb3JFeHRlbnNpb25EaXJlY3RBY3Rpb25UeXBlW1wiY2hlY2tfc3luY19zdGF0dXNcIl0gPSBcImNoZWNrX3N5bmNfc3RhdHVzXCI7XHJcbiAgICBFTWV0ZW9yRXh0ZW5zaW9uRGlyZWN0QWN0aW9uVHlwZVtcInN5bmNfYWNjb3VudHNcIl0gPSBcInN5bmNfYWNjb3VudHNcIjtcclxuICAgIEVNZXRlb3JFeHRlbnNpb25EaXJlY3RBY3Rpb25UeXBlW1wib3Blbl9wYWdlXCJdID0gXCJvcGVuX3BhZ2VcIjtcclxufSkoRU1ldGVvckV4dGVuc2lvbkRpcmVjdEFjdGlvblR5cGUgPSBleHBvcnRzLkVNZXRlb3JFeHRlbnNpb25EaXJlY3RBY3Rpb25UeXBlIHx8IChleHBvcnRzLkVNZXRlb3JFeHRlbnNpb25EaXJlY3RBY3Rpb25UeXBlID0ge30pKTtcclxudmFyIEVNZXRlb3JJbmplY3RlZEZlYXR1cmU7XHJcbihmdW5jdGlvbiAoRU1ldGVvckluamVjdGVkRmVhdHVyZSkge1xyXG4gICAgRU1ldGVvckluamVjdGVkRmVhdHVyZVtcIm9wZW5fcGFnZVwiXSA9IFwib3Blbl9wYWdlXCI7XHJcbiAgICBFTWV0ZW9ySW5qZWN0ZWRGZWF0dXJlW1wiYmF0Y2hfaW1wb3J0XCJdID0gXCJiYXRjaF9pbXBvcnRcIjtcclxuICAgIEVNZXRlb3JJbmplY3RlZEZlYXR1cmVbXCJzeW5jX2NoZWNrXCJdID0gXCJzeW5jX2NoZWNrXCI7XHJcbiAgICBFTWV0ZW9ySW5qZWN0ZWRGZWF0dXJlW1wiYWNjb3VudF9zeW5jXCJdID0gXCJhY2NvdW50X3N5bmNcIjtcclxufSkoRU1ldGVvckluamVjdGVkRmVhdHVyZSA9IGV4cG9ydHMuRU1ldGVvckluamVjdGVkRmVhdHVyZSB8fCAoZXhwb3J0cy5FTWV0ZW9ySW5qZWN0ZWRGZWF0dXJlID0ge30pKTtcclxudmFyIEVEYXBwQWN0aW9uU291cmNlO1xyXG4oZnVuY3Rpb24gKEVEYXBwQWN0aW9uU291cmNlKSB7XHJcbiAgICBFRGFwcEFjdGlvblNvdXJjZVtcIndlYnNpdGVfY2FsbGJhY2tcIl0gPSBcIndjYlwiO1xyXG4gICAgRURhcHBBY3Rpb25Tb3VyY2VbXCJ3ZWJzaXRlX3Bvc3RfbWVzc2FnZVwiXSA9IFwid3BtXCI7XHJcbiAgICBFRGFwcEFjdGlvblNvdXJjZVtcIndlYnNpdGVfdmlzaXRcIl0gPSBcInd2XCI7XHJcbiAgICBFRGFwcEFjdGlvblNvdXJjZVtcImV4dGVuc2lvbl9pbmplY3RlZFwiXSA9IFwiZXh0XCI7XHJcbn0pKEVEYXBwQWN0aW9uU291cmNlID0gZXhwb3J0cy5FRGFwcEFjdGlvblNvdXJjZSB8fCAoZXhwb3J0cy5FRGFwcEFjdGlvblNvdXJjZSA9IHt9KSk7XHJcbnZhciBFRGFwcEFjdGlvbkNvbm5lY3Rpb25TdGF0dXM7XHJcbihmdW5jdGlvbiAoRURhcHBBY3Rpb25Db25uZWN0aW9uU3RhdHVzKSB7XHJcbiAgICBFRGFwcEFjdGlvbkNvbm5lY3Rpb25TdGF0dXNbXCJpbml0aWFsaXppbmdcIl0gPSBcImluaXRpYWxpemluZ1wiO1xyXG4gICAgRURhcHBBY3Rpb25Db25uZWN0aW9uU3RhdHVzW1wiY29ubmVjdGVkXCJdID0gXCJjb25uZWN0ZWRcIjtcclxuICAgIEVEYXBwQWN0aW9uQ29ubmVjdGlvblN0YXR1c1tcImF0dGVtcHRpbmdfcmVjb25uZWN0XCJdID0gXCJhdHRlbXB0aW5nX3JlY29ubmVjdFwiO1xyXG4gICAgRURhcHBBY3Rpb25Db25uZWN0aW9uU3RhdHVzW1wiZGlzY29ubmVjdGVkXCJdID0gXCJkaXNjb25uZWN0ZWRcIjtcclxuICAgIEVEYXBwQWN0aW9uQ29ubmVjdGlvblN0YXR1c1tcImNsb3NlZF9zdWNjZXNzXCJdID0gXCJjbG9zZWRfc3VjY2Vzc1wiO1xyXG4gICAgRURhcHBBY3Rpb25Db25uZWN0aW9uU3RhdHVzW1wiY2xvc2VkX2ZhaWxcIl0gPSBcImNsb3NlZF9mYWlsXCI7XHJcbiAgICBFRGFwcEFjdGlvbkNvbm5lY3Rpb25TdGF0dXNbXCJjbG9zZWRfd2luZG93XCJdID0gXCJjbG9zZWRfd2luZG93XCI7XHJcbn0pKEVEYXBwQWN0aW9uQ29ubmVjdGlvblN0YXR1cyA9IGV4cG9ydHMuRURhcHBBY3Rpb25Db25uZWN0aW9uU3RhdHVzIHx8IChleHBvcnRzLkVEYXBwQWN0aW9uQ29ubmVjdGlvblN0YXR1cyA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzX2RhcHBDb25uZWN0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/types_dappConnect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_utility/data_type_utils/StringUtils.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_utility/data_type_utils/StringUtils.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StringUtils = exports.stringToConstantStyledString = exports.convertToSlug = exports.pad = exports.createPadder = exports.BetterStringArray = exports.safeAppend = exports.firstNotNullEmpty = exports.nullEmpty = exports.notNullEmpty = exports.StringRegex = void 0;\r\nexports.StringRegex = {\r\n    digitsRegex: /\\b\\d+\\b/gi,\r\n};\r\nconst notNullEmpty = (str) => {\r\n    return str != null && str.length > 0;\r\n};\r\nexports.notNullEmpty = notNullEmpty;\r\nconst nullEmpty = (str) => {\r\n    return !(0, exports.notNullEmpty)(str);\r\n};\r\nexports.nullEmpty = nullEmpty;\r\nconst firstNotNullEmpty = (...strItems) => {\r\n    for (const item of strItems) {\r\n        if ((0, exports.notNullEmpty)(item)) {\r\n            return item;\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\nexports.firstNotNullEmpty = firstNotNullEmpty;\r\nconst anyNullEmpty = (strs) => {\r\n    for (const str of strs) {\r\n        if ((0, exports.nullEmpty)(str)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\nconst safeAppend = (str, value, ifEmptyValue = null) => {\r\n    return (0, exports.notNullEmpty)(str)\r\n        ? str + value\r\n        : ifEmptyValue != null\r\n            ? ifEmptyValue\r\n            : value;\r\n};\r\nexports.safeAppend = safeAppend;\r\nclass BetterStringArray extends Array {\r\n    pushIfNotNullEmpty(str) {\r\n        if ((0, exports.notNullEmpty)(str)) {\r\n            this.push(str);\r\n        }\r\n    }\r\n}\r\nexports.BetterStringArray = BetterStringArray;\r\nfunction createPadder(padCharacter, desiredTotalLength, padFromRight = false) {\r\n    return (input) => {\r\n        return pad(input, padCharacter, desiredTotalLength, padFromRight);\r\n    };\r\n}\r\nexports.createPadder = createPadder;\r\nfunction pad(input, padCharacter, desiredTotalLength, padFromRight = false) {\r\n    const difference = desiredTotalLength - `${input}`.length;\r\n    if (difference > 0) {\r\n        const padding = new Array(difference).fill(padCharacter);\r\n        if (padFromRight) {\r\n            return `${input}${padding.join(\"\")}`;\r\n        }\r\n        return `${padding.join(\"\")}${input}`;\r\n    }\r\n    return `${input}`;\r\n}\r\nexports.pad = pad;\r\nconst regexAllSpaces = new RegExp(\"\\\\s+\", \"g\");\r\nconst regexDoubleDashes = new RegExp(\"--+\", \"g\");\r\nconst regexFirstDash = new RegExp(\"^-+\", \"g\");\r\nconst regexLastDash = new RegExp(\"-+$\", \"g\");\r\nconst regexSingleDash = new RegExp(\"-\", \"g\");\r\nconst regexRemoveNonWord = new RegExp(\"[^\\\\w\\\\-]+\", \"g\");\r\nconst regexAllUnderscores = new RegExp(\"_\", \"g\");\r\nfunction escapeRegExp(string) {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n}\r\nconst convertToSlug = (text, { slugDivider = \"-\", letterCase = \"LOWER\", normalize = true, excludeCharacters = [], } = {}) => {\r\n    if (!text || text.length === 0) {\r\n        return \"\";\r\n    }\r\n    let resp = text.toString();\r\n    if (normalize) {\r\n        resp = resp.normalize(\"NFD\");\r\n    }\r\n    if (letterCase === \"LOWER\") {\r\n        resp = resp.toLowerCase();\r\n    }\r\n    else if (letterCase === \"UPPER\") {\r\n        resp = resp.toUpperCase();\r\n    }\r\n    return resp\r\n        .replace(regexAllSpaces, \"-\") // Replace spaces with -\r\n        .replace(excludeCharacters.length > 0\r\n        ? new RegExp(`[^\\\\w\\\\-${excludeCharacters\r\n            .map((c) => escapeRegExp(c))\r\n            .join(\"\")}]+`, \"g\")\r\n        : regexRemoveNonWord, \"\") // Remove all non-word chars\r\n        .replace(excludeCharacters.includes(\"_\") ? regexAllSpaces : regexAllUnderscores, \"-\") // replace underscores with dashes\r\n        .replace(regexDoubleDashes, \"-\") // Replace multiple - with single -\r\n        .replace(regexFirstDash, \"\") // Trim - from start of text\r\n        .replace(regexLastDash, \"\") // Trim - from end of text\r\n        .replace(regexSingleDash, slugDivider); // Replace all - with whatever the slug divider is\r\n    /*return resp\r\n      .replace(/\\s+/g, \"-\") // Replace spaces with -\r\n      // .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars\r\n      .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars\r\n      .replace(/_/g, \"-\") // replace underscores with dashes\r\n      .replace(/\\-\\-+/g, \"-\") // Replace multiple - with single -\r\n      .replace(/^-+/, \"\") // Trim - from start of text\r\n      .replace(/-+$/, \"\") // Trim - from end of text\r\n      .replace(/-/g, slugDivider); // Replace all - with whatever the slug divider is*/\r\n};\r\nexports.convertToSlug = convertToSlug;\r\n// Replace spaces with underscores and make letters UPPERCASE:\r\n// eg. \"Some thing's\" -> \"SOME_THINGS\"\r\nconst stringToConstantStyledString = (input) => {\r\n    return (0, exports.convertToSlug)(input, {\r\n        normalize: true,\r\n        slugDivider: \"_\",\r\n        letterCase: \"UPPER\",\r\n    });\r\n    // return input.replace(/[^\\w\\s]/g, \"\").replace(\"/\\s+/g\", \"_\").toUpperCase();\r\n};\r\nexports.stringToConstantStyledString = stringToConstantStyledString;\r\nconst reverse = (input) => {\r\n    let r = ``;\r\n    for (const char of input) {\r\n        r = `${char}${r}`;\r\n    }\r\n    return r;\r\n};\r\nfunction isUriEncoded(uri) {\r\n    uri = uri || \"\";\r\n    return uri !== decodeURIComponent(uri);\r\n}\r\nconst decodeUriFully = (uri) => {\r\n    let failSafe = 0;\r\n    while (isUriEncoded(uri)) {\r\n        failSafe += 1;\r\n        uri = decodeURIComponent(uri);\r\n        if (failSafe > 20) {\r\n            throw new Error(`String Utils: Decode URI Fully: Enacted while loop too many times with attempt to decode fully.`);\r\n        }\r\n    }\r\n    return uri;\r\n};\r\nconst removeAndTrim = (input, removeText, { spaceAware = true, insideWords = false } = {}) => {\r\n    let text = `${input}`;\r\n    for (const rem of removeText) {\r\n        if (spaceAware) {\r\n            if (!insideWords) {\r\n                if (text.indexOf(` ${rem} `) >= 0) {\r\n                    text = text.replace(` ${rem} `, \" \");\r\n                }\r\n                else {\r\n                    if (text.startsWith(`${rem} `)) {\r\n                        text = text.substring(rem.length + 1);\r\n                    }\r\n                    if (text.endsWith(` ${rem}`)) {\r\n                        text = text.substring(0, text.length - (rem.length + 1));\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                const checkNew = [\r\n                    new RegExp(`\\\\s${rem}\\\\s`, \"g\"),\r\n                    new RegExp(`\\\\s${rem}`, \"g\"),\r\n                    new RegExp(`${rem}\\\\s`, \"g\"),\r\n                ];\r\n                for (const remNew of checkNew) {\r\n                    if (remNew.test(text)) {\r\n                        console.log(`Replacing \"${remNew}\" in \"${text}\"`);\r\n                        text = text.replace(remNew, \" \");\r\n                        console.log(`Text after: \"${text}\"`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (text.indexOf(rem) >= 0) {\r\n                text = text.replace(rem, \"\");\r\n            }\r\n        }\r\n    }\r\n    return text.trim();\r\n};\r\nfunction sortCompareStrings(a, b) {\r\n    const aa = a.toLowerCase();\r\n    const bb = b.toLowerCase();\r\n    if (aa < bb)\r\n        //sort string ascending\r\n        return -1;\r\n    if (aa > bb)\r\n        return 1;\r\n    return 0; //default return value (no sorting)\r\n}\r\nfunction comparePure(a, b) {\r\n    if (a > b) {\r\n        return 1;\r\n    }\r\n    if (a < b) {\r\n        return -1;\r\n    }\r\n    return 0;\r\n}\r\nfunction onlyNotNullEmpty(strArray) {\r\n    let notNullEmptyArray = [];\r\n    for (const str of strArray) {\r\n        if ((0, exports.notNullEmpty)(str)) {\r\n            notNullEmptyArray.push(str);\r\n        }\r\n    }\r\n    return notNullEmptyArray;\r\n}\r\nconst joinIntoUrl = (...routes) => {\r\n    return routes\r\n        .filter((v) => v)\r\n        .map((v, i, arr) => {\r\n        const isNotFirst = i !== 0;\r\n        const isNotLast = i !== arr.length - 1;\r\n        if (isNotFirst) {\r\n            v = v.startsWith(\"/\") ? v.slice(1) : v;\r\n        }\r\n        if (isNotLast) {\r\n            v = v.endsWith(\"/\") ? v.slice(0, -1) : v;\r\n        }\r\n        return v;\r\n    })\r\n        .join(\"/\");\r\n};\r\nconst getUrlWithBaseUrl = (baseUrl, route) => {\r\n    const isRouteCompleted = route.startsWith(\"http://\") || route.startsWith(\"https://\");\r\n    if (isRouteCompleted) {\r\n        return route;\r\n    }\r\n    return joinIntoUrl(baseUrl, route);\r\n};\r\nconst isHashId = (accountId) => {\r\n    const hash = accountId.match(/^[a-zA-Z0-9]+$/);\r\n    return Boolean(hash);\r\n    // accountId.match(/^[a-zA-Z0-9]{64}$/)\r\n};\r\nexports.StringUtils = {\r\n    isUriEncoded,\r\n    decodeUriFully,\r\n    StringRegex: exports.StringRegex,\r\n    reverse,\r\n    notNullEmpty: exports.notNullEmpty,\r\n    nullEmpty: exports.nullEmpty,\r\n    anyNullEmpty,\r\n    safeAppend: exports.safeAppend,\r\n    createPadder,\r\n    pad,\r\n    convertToSlug: exports.convertToSlug,\r\n    stringToConstantStyledString: exports.stringToConstantStyledString,\r\n    removeAndTrim,\r\n    sortCompareStrings,\r\n    comparePure,\r\n    onlyNotNullEmpty,\r\n    firstNotNullEmpty: exports.firstNotNullEmpty,\r\n    joinIntoUrl,\r\n    getUrlWithBaseUrl,\r\n    isHashId,\r\n};\r\n//# sourceMappingURL=StringUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_utility/data_type_utils/StringUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_utility/state_utils/EnvironmentStorageUtils.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_utility/state_utils/EnvironmentStorageUtils.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.EnvironmentStateAdapter_Sync = exports.EnvironmentStateAdapter = void 0;\r\nclass EnvironmentStateAdapter {\r\n    constructor(implementation) {\r\n        this.implementation = implementation;\r\n    }\r\n    async setJson(key, value) {\r\n        await this.implementation.setString(key, JSON.stringify(value));\r\n    }\r\n    async getJson(key) {\r\n        const val = await this.implementation.getString(key);\r\n        if (val == null || val === \"undefined\" || val === \"null\") {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(val);\r\n    }\r\n    async setString(key, value) {\r\n        await this.implementation.setString(key, value);\r\n    }\r\n    async getString(key) {\r\n        const val = await this.implementation.getString(key);\r\n        if (val == null) {\r\n            return undefined;\r\n        }\r\n        return val;\r\n    }\r\n    createJsonGetterSetter(key) {\r\n        return {\r\n            get: () => this.getJson(key),\r\n            set: (value) => this.setJson(key, value),\r\n        };\r\n    }\r\n    createStringGetterSetter(key) {\r\n        return {\r\n            get: () => this.getString(key),\r\n            set: (value) => this.setString(key, value),\r\n        };\r\n    }\r\n}\r\nexports.EnvironmentStateAdapter = EnvironmentStateAdapter;\r\nclass EnvironmentStateAdapter_Sync {\r\n    constructor(implementation) {\r\n        this.implementation = implementation;\r\n    }\r\n    setJson(key, value) {\r\n        this.implementation.setString(key, JSON.stringify(value));\r\n    }\r\n    getJson(key) {\r\n        const val = this.implementation.getString(key);\r\n        if (val == null || val === \"undefined\" || val === \"null\") {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(val);\r\n    }\r\n    setString(key, value) {\r\n        this.implementation.setString(key, value);\r\n    }\r\n    getString(key) {\r\n        const val = this.implementation.getString(key);\r\n        if (val == null) {\r\n            return undefined;\r\n        }\r\n        return val;\r\n    }\r\n    clear(key) {\r\n        this.implementation.clear(key);\r\n    }\r\n    createJsonGetterSetter(key) {\r\n        return {\r\n            get: () => this.getJson(key),\r\n            set: (value) => this.setJson(key, value),\r\n        };\r\n    }\r\n    createStringGetterSetter(key) {\r\n        return {\r\n            get: () => this.getString(key),\r\n            set: (value) => this.setString(key, value),\r\n        };\r\n    }\r\n}\r\nexports.EnvironmentStateAdapter_Sync = EnvironmentStateAdapter_Sync;\r\n//# sourceMappingURL=EnvironmentStorageUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3ItY29tbW9uL3NyYy9tb2R1bGVzX3V0aWxpdHkvc3RhdGVfdXRpbHMvRW52aXJvbm1lbnRTdG9yYWdlVXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0NBQW9DLEdBQUcsK0JBQStCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9AbWV0ZW9yd2FsbGV0L3Nkay9kaXN0L21ldGVvci1jb21tb24vc3JjL21vZHVsZXNfdXRpbGl0eS9zdGF0ZV91dGlscy9FbnZpcm9ubWVudFN0b3JhZ2VVdGlscy5qcz81OGE5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuRW52aXJvbm1lbnRTdGF0ZUFkYXB0ZXJfU3luYyA9IGV4cG9ydHMuRW52aXJvbm1lbnRTdGF0ZUFkYXB0ZXIgPSB2b2lkIDA7XHJcbmNsYXNzIEVudmlyb25tZW50U3RhdGVBZGFwdGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGltcGxlbWVudGF0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5pbXBsZW1lbnRhdGlvbiA9IGltcGxlbWVudGF0aW9uO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgc2V0SnNvbihrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5pbXBsZW1lbnRhdGlvbi5zZXRTdHJpbmcoa2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0SnNvbihrZXkpIHtcclxuICAgICAgICBjb25zdCB2YWwgPSBhd2FpdCB0aGlzLmltcGxlbWVudGF0aW9uLmdldFN0cmluZyhrZXkpO1xyXG4gICAgICAgIGlmICh2YWwgPT0gbnVsbCB8fCB2YWwgPT09IFwidW5kZWZpbmVkXCIgfHwgdmFsID09PSBcIm51bGxcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWwpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgc2V0U3RyaW5nKGtleSwgdmFsdWUpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLmltcGxlbWVudGF0aW9uLnNldFN0cmluZyhrZXksIHZhbHVlKTtcclxuICAgIH1cclxuICAgIGFzeW5jIGdldFN0cmluZyhrZXkpIHtcclxuICAgICAgICBjb25zdCB2YWwgPSBhd2FpdCB0aGlzLmltcGxlbWVudGF0aW9uLmdldFN0cmluZyhrZXkpO1xyXG4gICAgICAgIGlmICh2YWwgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlSnNvbkdldHRlclNldHRlcihrZXkpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBnZXQ6ICgpID0+IHRoaXMuZ2V0SnNvbihrZXkpLFxyXG4gICAgICAgICAgICBzZXQ6ICh2YWx1ZSkgPT4gdGhpcy5zZXRKc29uKGtleSwgdmFsdWUpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjcmVhdGVTdHJpbmdHZXR0ZXJTZXR0ZXIoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0OiAoKSA9PiB0aGlzLmdldFN0cmluZyhrZXkpLFxyXG4gICAgICAgICAgICBzZXQ6ICh2YWx1ZSkgPT4gdGhpcy5zZXRTdHJpbmcoa2V5LCB2YWx1ZSksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkVudmlyb25tZW50U3RhdGVBZGFwdGVyID0gRW52aXJvbm1lbnRTdGF0ZUFkYXB0ZXI7XHJcbmNsYXNzIEVudmlyb25tZW50U3RhdGVBZGFwdGVyX1N5bmMge1xyXG4gICAgY29uc3RydWN0b3IoaW1wbGVtZW50YXRpb24pIHtcclxuICAgICAgICB0aGlzLmltcGxlbWVudGF0aW9uID0gaW1wbGVtZW50YXRpb247XHJcbiAgICB9XHJcbiAgICBzZXRKc29uKGtleSwgdmFsdWUpIHtcclxuICAgICAgICB0aGlzLmltcGxlbWVudGF0aW9uLnNldFN0cmluZyhrZXksIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XHJcbiAgICB9XHJcbiAgICBnZXRKc29uKGtleSkge1xyXG4gICAgICAgIGNvbnN0IHZhbCA9IHRoaXMuaW1wbGVtZW50YXRpb24uZ2V0U3RyaW5nKGtleSk7XHJcbiAgICAgICAgaWYgKHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCB2YWwgPT09IFwibnVsbFwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHZhbCk7XHJcbiAgICB9XHJcbiAgICBzZXRTdHJpbmcoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuaW1wbGVtZW50YXRpb24uc2V0U3RyaW5nKGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZ2V0U3RyaW5nKGtleSkge1xyXG4gICAgICAgIGNvbnN0IHZhbCA9IHRoaXMuaW1wbGVtZW50YXRpb24uZ2V0U3RyaW5nKGtleSk7XHJcbiAgICAgICAgaWYgKHZhbCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWw7XHJcbiAgICB9XHJcbiAgICBjbGVhcihrZXkpIHtcclxuICAgICAgICB0aGlzLmltcGxlbWVudGF0aW9uLmNsZWFyKGtleSk7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVKc29uR2V0dGVyU2V0dGVyKGtleSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGdldDogKCkgPT4gdGhpcy5nZXRKc29uKGtleSksXHJcbiAgICAgICAgICAgIHNldDogKHZhbHVlKSA9PiB0aGlzLnNldEpzb24oa2V5LCB2YWx1ZSksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGNyZWF0ZVN0cmluZ0dldHRlclNldHRlcihrZXkpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBnZXQ6ICgpID0+IHRoaXMuZ2V0U3RyaW5nKGtleSksXHJcbiAgICAgICAgICAgIHNldDogKHZhbHVlKSA9PiB0aGlzLnNldFN0cmluZyhrZXksIHZhbHVlKSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRW52aXJvbm1lbnRTdGF0ZUFkYXB0ZXJfU3luYyA9IEVudmlyb25tZW50U3RhdGVBZGFwdGVyX1N5bmM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVudmlyb25tZW50U3RvcmFnZVV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_utility/state_utils/EnvironmentStorageUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWallet.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWallet.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ConnectedMeteorWalletAccount = exports.MeteorWallet = void 0;\r\nconst near_api_js_1 = __webpack_require__(/*! near-api-js */ \"(ssr)/./node_modules/near-api-js/lib/index.js\");\r\nconst transactions_1 = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/@near-js/transactions/lib/commonjs/index.cjs\");\r\nconst types_dappConnect_1 = __webpack_require__(/*! ../../meteor-common/src/modules_feature/dapp_connect/types_dappConnect */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/types_dappConnect.js\");\r\nconst borsh_1 = __webpack_require__(/*! borsh */ \"(ssr)/./node_modules/@meteorwallet/sdk/node_modules/borsh/lib/index.js\");\r\nconst StringUtils_1 = __webpack_require__(/*! ../../meteor-common/src/modules_utility/data_type_utils/StringUtils */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_utility/data_type_utils/StringUtils.js\");\r\nconst EnvironmentStorageUtils_1 = __webpack_require__(/*! ../../meteor-common/src/modules_utility/state_utils/EnvironmentStorageUtils */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_utility/state_utils/EnvironmentStorageUtils.js\");\r\nconst MeteorSdkUtils_1 = __webpack_require__(/*! ./utils/MeteorSdkUtils */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/MeteorSdkUtils.js\");\r\nconst MeteorPostMessenger_1 = __webpack_require__(/*! ./postMessage/MeteorPostMessenger */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/postMessage/MeteorPostMessenger.js\");\r\nconst TransactionSchemaV2_1 = __webpack_require__(/*! ./near-schema/TransactionSchemaV2 */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/near-schema/TransactionSchemaV2.js\");\r\nconst crypto_1 = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/@near-js/crypto/lib/commonjs/index.cjs\");\r\nconst create_action_1 = __webpack_require__(/*! ./utils/create-action */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/create-action.js\");\r\nconst bn_js_1 = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\r\nconst LOGIN_WALLET_URL_SUFFIX = \"/login/\";\r\nconst SIGN_WALLET_URL_SUFFIX = \"/sign/\";\r\nconst MULTISIG_HAS_METHOD = \"add_request_and_confirm\";\r\nconst LOCAL_STORAGE_KEY_SUFFIX = \"_meteor_wallet_auth_key\";\r\nconst PENDING_ACCESS_KEY_PREFIX = \"pending_key\"; // browser storage key for a pending access key (i.e. key has been generated but we are not sure it was added yet)\r\nconst localStorageAdapter = new EnvironmentStorageUtils_1.EnvironmentStateAdapter_Sync({\r\n    getString: (key) => window.localStorage.getItem(key),\r\n    setString: (key, value) => window.localStorage.setItem(key, value),\r\n    clear: (key) => window.localStorage.removeItem(key),\r\n});\r\nconst sessionAdapter = new EnvironmentStorageUtils_1.EnvironmentStateAdapter_Sync({\r\n    getString: (key) => window.sessionStorage.getItem(key),\r\n    setString: (key, value) => window.sessionStorage.setItem(key, value),\r\n    clear: (key) => window.sessionStorage.removeItem(key),\r\n});\r\n/**\r\n * This class is used in conjunction with `near-api-js` and `BrowserLocalStorageKeyStore`.\r\n * It directs users to the Meteor Extension or (if not available) a popup of the Meteor Wallet website for key management.\r\n *\r\n * @example\r\n * ```js\r\n * import { MeteorWallet } from \"@meteorwallet/sdk\";\r\n *\r\n * // create new MeteorWallet instance (passing in your initialized Near connection)\r\n * const meteorWallet = new MeteorWallet({ near: connectedNear, appKeyPrefix: 'my-app' });\r\n *\r\n * // -- or -- (for a quick and default Near connection config)\r\n * const meteorWallet = MeteorWallet.init({ networkId: \"testnet\" });\r\n *\r\n * // If not signed in, start the sign-in flow with Meteor Wallet.\r\n * // Keys will be stored in the BrowserLocalStorageKeyStore\r\n * if(!meteorWallet.isSignedIn()) {\r\n *   const { accountId } = await meteorWallet.requestSignIn();\r\n * }\r\n * ```\r\n */\r\nclass MeteorWallet {\r\n    /**\r\n     * The easiest way to set up the SDK. Returns an instance of MeteorWallet, automatically connected to the Near API.\r\n     *\r\n     * If you need more control over the Near Network configuration- rather use {@link MeteorWallet:constructor}\r\n     *\r\n     * @example\r\n     * ```js\r\n     * const wallet = await MeteorWallet.init({ networkId: \"testnet\" });\r\n     * ```\r\n     */\r\n    static async init({ walletUrl, ...config }) {\r\n        const keyStore = new near_api_js_1.keyStores.BrowserLocalStorageKeyStore();\r\n        const near = await (0, near_api_js_1.connect)({\r\n            keyStore,\r\n            headers: {},\r\n            walletUrl: (0, MeteorSdkUtils_1.resolveWalletUrl)(config.networkId, walletUrl),\r\n            ...(0, MeteorSdkUtils_1.getNetworkPreset)(config.networkId),\r\n            ...config,\r\n        });\r\n        const wallet = new MeteorWallet({ near, appKeyPrefix: \"near_app\" });\r\n        // Cleanup up any pending keys (cancelled logins).\r\n        if (!wallet.isSignedIn()) {\r\n            await keyStore.clear();\r\n        }\r\n        return wallet;\r\n    }\r\n    /**\r\n     * Construct MeteorWallet. If you'd a quick and default way, you can also use {@link MeteorWallet.init}\r\n     *\r\n     * @example\r\n     * ```js\r\n     * // create new MeteorWallet instance (passing in your initialized Near connection)\r\n     * const meteorWallet = new MeteorWallet({ near: connectedNear, appKeyPrefix: 'my-app' });\r\n     *\r\n     * if(!meteorWallet.isSignedIn()) {\r\n     *   const { accountId } = await meteorWallet.requestSignIn();\r\n     * }\r\n     * ```\r\n     */\r\n    constructor({ near, appKeyPrefix = near.config.contractName ?? \"default\", }) {\r\n        /** @hidden */\r\n        this._initializationPromises = [];\r\n        this._near = near;\r\n        const authDataKey = appKeyPrefix + LOCAL_STORAGE_KEY_SUFFIX;\r\n        this._authDataKey = authDataKey;\r\n        this._authData = localStorageAdapter.getJson(authDataKey) ?? { allKeys: [] };\r\n        this._networkId = near.config.networkId;\r\n        this._walletBaseUrl = near.config.walletUrl;\r\n        this._keyStore = near.connection.signer.keyStore;\r\n        /*\r\n        console.log(\"Initialized wallet- checking if signed in\");\r\n    \r\n        if (!this.isSignedIn()) {\r\n          console.log(\"Completing sign-in process, if its available\");\r\n          this._initializationPromises.push(this._completeSignInWithAccessKey());\r\n        }*/\r\n    }\r\n    /* async initialize() {\r\n       await Promise.all(this._initializationPromises);\r\n     }*/\r\n    isExtensionInstalled() {\r\n        return window.meteorWallet != null;\r\n    }\r\n    /**\r\n     * Returns true, if this app is authorized with an account in the wallet.\r\n     * @example\r\n     * ```js\r\n     * const wallet = new MeteorWallet({ near: connectedNear, appKeyPrefix: 'my-app' });\r\n     * wallet.isSignedIn();\r\n     * ```\r\n     */\r\n    isSignedIn() {\r\n        return !!this._authData.accountId;\r\n    }\r\n    /**\r\n     * Returns authorized Account ID.\r\n     * @example\r\n     * ```js\r\n     * const wallet = new MeteorWallet(near, 'my-app');\r\n     * const accountId = wallet.getAccountId();\r\n     * ```\r\n     */\r\n    getAccountId() {\r\n        return this._authData.accountId;\r\n    }\r\n    /**\r\n     * Verifies that the user is the owner of a specific Near account, available in the wallet.\r\n     * Removes the need to do blockchain operations for simple Dapp actions.\r\n     * Signs a payload with the wallet's private key. Will return a promise with a payload like so:\r\n     *\r\n     * ```ts\r\n     * interface VerifiedOwner {\r\n     *   accountId: string;\r\n     *   message: string;                 // The same passed message, unencrypted\r\n     *   blockId: string;\r\n     *   publicKey: string;               // The public key which should be verified as belonging to this account\r\n     *   signature: string;               // The signed payload (this exact same object JSON stringified, excluding this \"signature\" property)\r\n     *   keyType: utils.key_pair.KeyType; // Type from inside the near-api-js package\r\n     * }\r\n     * ```\r\n     *\r\n     * or throw a {@link MeteorActionError} error if the verification failed for whatever reason.\r\n     * */\r\n    async verifyOwner(options) {\r\n        const accountId = options.accountId ?? this.getAccountId();\r\n        const response = await (0, MeteorPostMessenger_1.getMeteorPostMessenger)().connectAndWaitForResponse({\r\n            actionType: types_dappConnect_1.EExternalActionType.verify_owner,\r\n            inputs: {\r\n                accountId,\r\n                message: options.message,\r\n            },\r\n            network: this._networkId,\r\n        });\r\n        if (response.success) {\r\n            return response;\r\n        }\r\n        else {\r\n            throw new types_dappConnect_1.MeteorActionError({\r\n                endTags: response.endTags,\r\n                message: response.message,\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Requests a sign-in using Meteor Wallet. Will return a promise with the `accountId` of the\r\n     * signed-in account, or throw a {@link MeteorActionError} error if the sign-in failed for whatever reason.\r\n     * */\r\n    async requestSignIn(options) {\r\n        const { keyPair, ...restOptions } = options;\r\n        const accessKey = keyPair ?? near_api_js_1.KeyPair.fromRandom(\"ed25519\");\r\n        let usingPublicKey = accessKey.getPublicKey().toString();\r\n        const response = await (0, MeteorPostMessenger_1.getMeteorPostMessenger)().connectAndWaitForResponse({\r\n            actionType: types_dappConnect_1.EExternalActionType.login,\r\n            inputs: { public_key: usingPublicKey, ...restOptions },\r\n            network: this._networkId,\r\n        });\r\n        if (response.success) {\r\n            const { allKeys, accountId } = response.payload;\r\n            this._authData = {\r\n                accountId,\r\n                allKeys,\r\n                signedInContract: {\r\n                    contract_id: restOptions.contract_id,\r\n                    public_key: usingPublicKey,\r\n                },\r\n            };\r\n            localStorageAdapter.setJson(this._authDataKey, this._authData);\r\n            await this._keyStore.setKey(this._networkId, accountId, accessKey);\r\n            return {\r\n                success: true,\r\n                endTags: [],\r\n                payload: {\r\n                    accessKey,\r\n                    accountId,\r\n                },\r\n            };\r\n        }\r\n        else {\r\n            throw new types_dappConnect_1.MeteorActionError({\r\n                endTags: response.endTags,\r\n                message: response.message,\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Sign out from the current account\r\n     */\r\n    async signOut() {\r\n        const accountId = this.getAccountId();\r\n        if (this._authData.signedInContract != null && accountId != null) {\r\n            const inputs = {\r\n                accountId,\r\n                contractInfo: this._authData.signedInContract,\r\n            };\r\n            const response = await (0, MeteorPostMessenger_1.getMeteorPostMessenger)().connectAndWaitForResponse({\r\n                actionType: types_dappConnect_1.EExternalActionType.logout,\r\n                inputs,\r\n                network: this._networkId,\r\n            });\r\n        }\r\n        this._authData = { allKeys: [] };\r\n        localStorageAdapter.clear(this._authDataKey);\r\n    }\r\n    /**\r\n     * Allows users to sign a message for a specific recipient using their NEAR account, based on the [NEP413](https://github.com/near/NEPs/pull/413).\r\n     *\r\n     * Will return a promise with a payload like so:\r\n     *\r\n     * ```ts\r\n     * interface signMessage {\r\n     *   accountId: string;               // The account name to which the publicKey corresponds as plain text\r\n     *   publicKey: string;               // The public counterpart of the key used to sign\r\n     *   signature: string;               // The base64 representation of the signature\r\n     *   state?: string;                  // The same state passed in.\r\n     * }\r\n     * ```\r\n     *\r\n     * or throw a {@link MeteorActionError} error if the signing failed for whatever reason.\r\n     * */\r\n    async signMessage({ message, nonce, recipient, callbackUrl, state, accountId, }) {\r\n        const response = await (0, MeteorPostMessenger_1.getMeteorPostMessenger)().connectAndWaitForResponse({\r\n            actionType: types_dappConnect_1.EExternalActionType.sign_message,\r\n            inputs: {\r\n                message,\r\n                nonce,\r\n                recipient,\r\n                callbackUrl,\r\n                state,\r\n                accountId,\r\n            },\r\n            network: this._networkId,\r\n        });\r\n        if (response.success) {\r\n            response.payload.state = state;\r\n            return response;\r\n        }\r\n        else {\r\n            throw new types_dappConnect_1.MeteorActionError({\r\n                endTags: response.endTags,\r\n                message: response.message,\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Sign transactions using Meteor Wallet. Will return a promise with an array of `FinalExecutionOutcome`\r\n     * of the given transactions.\r\n     * */\r\n    async requestSignTransactions(inputs) {\r\n        const { transactions } = inputs;\r\n        const transformedTransactions = await this.transformTransactions(transactions);\r\n        console.log(\"Transformed transactions\", transformedTransactions);\r\n        const response = await (0, MeteorPostMessenger_1.getMeteorPostMessenger)().connectAndWaitForResponse({\r\n            actionType: types_dappConnect_1.EExternalActionType.sign,\r\n            inputs: {\r\n                transactions: transformedTransactions\r\n                    .map((transaction) => (0, borsh_1.serialize)(TransactionSchemaV2_1.SCHEMA_V2, transaction))\r\n                    .map((serialized) => Buffer.from(serialized).toString(\"base64\"))\r\n                    .join(\",\"),\r\n            },\r\n            // inputs: { public_key: usingPublicKey, ...options },\r\n            network: this._networkId,\r\n        });\r\n        // console.log(\"Finished sign-in request\", response);\r\n        if (response.success) {\r\n            return response.payload.executionOutcomes;\r\n        }\r\n        else {\r\n            throw new types_dappConnect_1.MeteorActionError({\r\n                endTags: response.endTags,\r\n                message: response.message,\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Returns the current connected wallet account\r\n     */\r\n    account() {\r\n        const currentAccountId = this.getAccountId();\r\n        if ((0, StringUtils_1.notNullEmpty)(currentAccountId) &&\r\n            this._connectedAccount?.accountId !== currentAccountId) {\r\n            this._connectedAccount = new ConnectedMeteorWalletAccount(this, this._near.connection, currentAccountId);\r\n        }\r\n        return this._connectedAccount;\r\n    }\r\n    async transformTransactions(transactions) {\r\n        const account = this.account();\r\n        const { networkId, signer, provider } = account.connection;\r\n        const localKey = await signer.getPublicKey(account.accountId, networkId);\r\n        return Promise.all(transactions.map(async (transaction, index) => {\r\n            const accessKey = await account.accessKeyForTransaction(localKey);\r\n            if (!accessKey) {\r\n                throw new Error(`Failed to find matching key for transaction sent to ${transaction.receiverId}`);\r\n            }\r\n            const transformedActions = transaction.actions.map((action) => (0, create_action_1.createAction)(action));\r\n            const block = await provider.block({ finality: \"final\" });\r\n            return (0, transactions_1.createTransaction)(account.accountId, crypto_1.PublicKey.from(accessKey.public_key), transaction.receiverId, new bn_js_1.BN(accessKey.access_key.nonce).add(new bn_js_1.BN(index)).add(new bn_js_1.BN(1)), transformedActions, near_api_js_1.utils.serialize.base_decode(block.header.hash));\r\n            /*return {\r\n              receiverId: transaction.receiverId,\r\n              signerId: account.accountId,\r\n              actions: transformedActions,\r\n            };*/\r\n        }));\r\n    }\r\n}\r\nexports.MeteorWallet = MeteorWallet;\r\n/**\r\n * Near Account implementation which makes use of {@link MeteorWallet} when no local key is available.\r\n *\r\n * Generally won't be created directly- can be obtained by using {@link MeteorWallet.account}\r\n *\r\n * @example\r\n * ```js\r\n * const account = meteorWallet.account();\r\n *\r\n * // uses Meteor Wallet to sign the transaction using this account\r\n * const response = await account.requestSignTransaction({\r\n *   actions: transactionActions,\r\n *   receiverId: \"my-contract\"\r\n * });\r\n * ```\r\n */\r\nclass ConnectedMeteorWalletAccount extends near_api_js_1.Account {\r\n    /** @hidden */\r\n    constructor(walletConnection, connection, accountId) {\r\n        super(connection, accountId);\r\n        this.meteorWallet = walletConnection;\r\n    }\r\n    /**\r\n     * Sign a transaction using Meteor Wallet. Overrides the Near Account API method of the same name, makes use of {@link ConnectedMeteorWalletAccount.signAndSendTransaction_direct}\r\n     */\r\n    async signAndSendTransaction(...args) {\r\n        if (typeof args[0] === \"string\") {\r\n            return this.signAndSendTransaction_direct({\r\n                receiverId: args[0],\r\n                actions: args[1],\r\n            });\r\n        }\r\n        return this.signAndSendTransaction_direct(args[0]);\r\n    }\r\n    /** @hidden */\r\n    async trySendOrCreateTransaction({ receiverId, actions, }) {\r\n        const localKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\r\n        let accessKey = await this.accessKeyForTransaction(localKey);\r\n        if (accessKey != null && accessKey.access_key.permission !== \"FullAccess\") {\r\n            // check that this is a valid access key for the given transaction\r\n            const accessKeyMatchesTransaction = await this.accessKeyMatchesTransaction(accessKey, receiverId, actions);\r\n            if (!accessKeyMatchesTransaction) {\r\n                return {\r\n                    sent: false,\r\n                    transaction: {\r\n                        receiverId,\r\n                        signerId: this.accountId,\r\n                        actions,\r\n                    },\r\n                };\r\n            }\r\n        }\r\n        if (accessKey) {\r\n            if (localKey && localKey.toString() === accessKey.public_key) {\r\n                try {\r\n                    return {\r\n                        executionOutcome: await super.signAndSendTransaction({\r\n                            receiverId,\r\n                            actions: actions.map((action) => (0, create_action_1.createAction)(action)),\r\n                        }),\r\n                        sent: true,\r\n                    };\r\n                }\r\n                catch (e) {\r\n                    if (e.type !== \"NotEnoughAllowance\") {\r\n                        throw e;\r\n                        // accessKey = await this.accessKeyForTransaction(receiverId, actions);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        /*const block = await this.connection.provider.block({ finality: \"final\" });\r\n        const blockHash = baseDecode(block.header.hash);\r\n    \r\n        const publicKey = utils.PublicKey.from(accessKey.public_key);\r\n        // TODO: Cache & listen for nonce updates for given access key\r\n        const nonce = accessKey.access_key.nonce + 1;\r\n        const transaction = transactions.createTransaction(\r\n          this.accountId,\r\n          publicKey,\r\n          receiverId,\r\n          nonce,\r\n          actions,\r\n          blockHash,\r\n        );*/\r\n        return {\r\n            sent: false,\r\n            transaction: {\r\n                receiverId,\r\n                signerId: this.accountId,\r\n                actions,\r\n            },\r\n        };\r\n    }\r\n    /**\r\n     * Sign a transaction using Meteor Wallet\r\n     * @see {@link MeteorWallet.requestSignTransactions}\r\n     */\r\n    async signAndSendTransaction_direct({ receiverId, actions, }) {\r\n        const { transaction, sent, executionOutcome } = await this.trySendOrCreateTransaction({ receiverId, actions });\r\n        if (sent) {\r\n            return executionOutcome;\r\n        }\r\n        return (await this.meteorWallet.requestSignTransactions({\r\n            transactions: [transaction],\r\n        }))[0];\r\n    }\r\n    /** @hidden */\r\n    /*async signAndSendTransaction_redirect({\r\n      receiverId,\r\n      actions,\r\n      walletMeta,\r\n      walletCallbackUrl = window.location.href,\r\n    }: SignAndSendTransactionOptions): Promise<FinalExecutionOutcome> {\r\n      const { transaction, sent, executionOutcome } = await this.trySendOrCreateTransaction({ receiverId, actions });\r\n  \r\n      if (sent) {\r\n        return executionOutcome!;\r\n      }\r\n  \r\n      await this.meteorWallet.requestSignTransactions_redirect({\r\n        transactions: [transaction!],\r\n        meta: walletMeta,\r\n        callback_url: walletCallbackUrl,\r\n      });\r\n  \r\n      return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n          reject(new Error(\"Failed to redirect to sign transaction\"));\r\n        }, 1000);\r\n      });\r\n    }*/\r\n    /**\r\n     * Check if given access key allows the function call or method attempted in transaction\r\n     * @param accessKey Array of {access_key: AccessKey, public_key: PublicKey} items\r\n     * @param receiverId The NEAR account attempting to have access\r\n     * @param actions The action(s) needed to be checked for access\r\n     */\r\n    async accessKeyMatchesTransaction(accessKey, receiverId, actions) {\r\n        const { access_key: { permission }, } = accessKey;\r\n        if (permission === \"FullAccess\") {\r\n            return true;\r\n        }\r\n        console.log(\"Comparing access key and actions\", {\r\n            accessKey,\r\n            receiverId,\r\n            actions,\r\n        });\r\n        if (permission.FunctionCall) {\r\n            const { receiver_id: allowedReceiverId, method_names: allowedMethods } = permission.FunctionCall;\r\n            /********************************\r\n             Accept multisig access keys and let wallets attempt to signAndSendTransaction\r\n             If an access key has itself as receiverId and method permission add_request_and_confirm, then it is being used in a wallet with multisig contract: https://github.com/near/core-contracts/blob/671c05f09abecabe7a7e58efe942550a35fc3292/multisig/src/lib.rs#L149-L153\r\n             ********************************/\r\n            if (allowedReceiverId === receiverId &&\r\n                allowedMethods.includes(MULTISIG_HAS_METHOD)) {\r\n                return true;\r\n            }\r\n            if (allowedReceiverId === receiverId) {\r\n                if (actions.length !== 1) {\r\n                    return false;\r\n                }\r\n                const firstAction = actions[0];\r\n                console.log(firstAction);\r\n                if (firstAction.type === \"FunctionCall\") {\r\n                    const functionCallParams = firstAction.params;\r\n                    return ((!functionCallParams.deposit ||\r\n                        functionCallParams.deposit.toString() === \"0\") && // TODO: Should support charging amount smaller than allowance?\r\n                        (allowedMethods.length === 0 ||\r\n                            allowedMethods.includes(functionCallParams.methodName)));\r\n                }\r\n                // const [{ functionCall }] = actions;\r\n                // return (\r\n                //   functionCall &&\r\n                //   (!functionCall.deposit || functionCall.deposit.toString() === \"0\") && // TODO: Should support charging amount smaller than allowance?\r\n                //   (allowedMethods.length === 0 ||\r\n                //     allowedMethods.includes(functionCall.methodName))\r\n                // );\r\n                // TODO: Handle cases when allowance doesn't have enough to pay for gas\r\n            }\r\n        }\r\n        // TODO: Support other permissions than FunctionCall\r\n        return false;\r\n    }\r\n    /**\r\n     * Helper function returning the access key (if it exists) to the receiver that grants the designated permission\r\n     * @param localKey A local public key provided to check for access\r\n     * @returns Promise<any>\r\n     */\r\n    async accessKeyForTransaction(localKey) {\r\n        const accessKeys = await this.getAccessKeys();\r\n        console.log(\"accessKeys\", accessKeys);\r\n        if (localKey) {\r\n            const accessKey = accessKeys.find((key) => key.public_key.toString() === localKey.toString());\r\n            if (accessKey) {\r\n                return accessKey;\r\n            }\r\n        }\r\n        const walletKeys = this.meteorWallet._authData.allKeys;\r\n        for (const accessKey of accessKeys) {\r\n            if (walletKeys.indexOf(accessKey.public_key) !== -1) {\r\n                return accessKey;\r\n            }\r\n        }\r\n        for (const accessKey of accessKeys) {\r\n            if (accessKey.access_key.permission === \"FullAccess\") {\r\n                return accessKey;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\nexports.ConnectedMeteorWalletAccount = ConnectedMeteorWalletAccount;\r\n//# sourceMappingURL=MeteorWallet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3Itc2RrL3NyYy9NZXRlb3JXYWxsZXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0NBQW9DLEdBQUcsb0JBQW9CO0FBQzNELHNCQUFzQixtQkFBTyxDQUFDLGtFQUFhO0FBQzNDLHVCQUF1QixtQkFBTyxDQUFDLGdHQUF1QjtBQUN0RCw0QkFBNEIsbUJBQU8sQ0FBQywrTEFBd0U7QUFDNUcsZ0JBQWdCLG1CQUFPLENBQUMscUZBQU87QUFDL0Isc0JBQXNCLG1CQUFPLENBQUMseUxBQXFFO0FBQ25HLGtDQUFrQyxtQkFBTyxDQUFDLHlNQUE2RTtBQUN2SCx5QkFBeUIsbUJBQU8sQ0FBQyxrSEFBd0I7QUFDekQsOEJBQThCLG1CQUFPLENBQUMsd0lBQW1DO0FBQ3pFLDhCQUE4QixtQkFBTyxDQUFDLHdJQUFtQztBQUN6RSxpQkFBaUIsbUJBQU8sQ0FBQyxvRkFBaUI7QUFDMUMsd0JBQXdCLG1CQUFPLENBQUMsZ0hBQXVCO0FBQ3ZELGdCQUFnQixtQkFBTyxDQUFDLG1EQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZUFBZTtBQUMzQjtBQUNBO0FBQ0EsMkNBQTJDLDZDQUE2QztBQUN4RjtBQUNBO0FBQ0EsNENBQTRDLHNCQUFzQjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsWUFBWTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRjtBQUNqRjtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Qsc0JBQXNCO0FBQ3RFO0FBQ0E7QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsMENBQTBDLGdDQUFnQztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1GQUFtRjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyw2Q0FBNkM7QUFDNUY7QUFDQTtBQUNBLGlCQUFpQixZQUFZO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw2REFBNkQ7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLDZDQUE2QztBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBLDBDQUEwQztBQUMxQywwQ0FBMEM7QUFDMUMsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix5QkFBeUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyx5QkFBeUI7QUFDL0Q7QUFDQTtBQUNBLGdCQUFnQiwwQkFBMEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsNENBQTRDO0FBQ2xFO0FBQ0EsU0FBUztBQUNUO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUMsMENBQTBDO0FBQzFDLDBDQUEwQztBQUMxQywwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHlCQUF5QjtBQUM1QztBQUNBLHdCQUF3QiwyREFBMkQ7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZUFBZTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IseUJBQXlCLHdDQUF3QztBQUNqRTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw4QkFBOEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RkFBdUYsdUJBQXVCO0FBQzlHO0FBQ0E7QUFDQSxpREFBaUQsbUJBQW1CO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsU0FBUztBQUNUO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSxtREFBbUQsb0JBQW9CO0FBQ3ZFO0FBQ0Esa0VBQWtFO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxSEFBcUg7QUFDckg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLHNCQUFzQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxtQkFBbUI7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDBDQUEwQyxzQkFBc0I7QUFDaEUsZ0JBQWdCLHNDQUFzQywwQ0FBMEMscUJBQXFCO0FBQ3JIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsY0FBYyxzQ0FBc0MsMENBQTBDLHFCQUFxQjtBQUNuSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0Esa0NBQWtDLDhDQUE4QztBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixjQUFjLFlBQVksSUFBSTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLG9CQUFvQiwrREFBK0Q7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGNBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby1uZWFyLy4vbm9kZV9tb2R1bGVzL0BtZXRlb3J3YWxsZXQvc2RrL2Rpc3QvbWV0ZW9yLXNkay9zcmMvTWV0ZW9yV2FsbGV0LmpzPzQxMzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5Db25uZWN0ZWRNZXRlb3JXYWxsZXRBY2NvdW50ID0gZXhwb3J0cy5NZXRlb3JXYWxsZXQgPSB2b2lkIDA7XHJcbmNvbnN0IG5lYXJfYXBpX2pzXzEgPSByZXF1aXJlKFwibmVhci1hcGktanNcIik7XHJcbmNvbnN0IHRyYW5zYWN0aW9uc18xID0gcmVxdWlyZShcIkBuZWFyLWpzL3RyYW5zYWN0aW9uc1wiKTtcclxuY29uc3QgdHlwZXNfZGFwcENvbm5lY3RfMSA9IHJlcXVpcmUoXCIuLi8uLi9tZXRlb3ItY29tbW9uL3NyYy9tb2R1bGVzX2ZlYXR1cmUvZGFwcF9jb25uZWN0L3R5cGVzX2RhcHBDb25uZWN0XCIpO1xyXG5jb25zdCBib3JzaF8xID0gcmVxdWlyZShcImJvcnNoXCIpO1xyXG5jb25zdCBTdHJpbmdVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uL21ldGVvci1jb21tb24vc3JjL21vZHVsZXNfdXRpbGl0eS9kYXRhX3R5cGVfdXRpbHMvU3RyaW5nVXRpbHNcIik7XHJcbmNvbnN0IEVudmlyb25tZW50U3RvcmFnZVV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vbWV0ZW9yLWNvbW1vbi9zcmMvbW9kdWxlc191dGlsaXR5L3N0YXRlX3V0aWxzL0Vudmlyb25tZW50U3RvcmFnZVV0aWxzXCIpO1xyXG5jb25zdCBNZXRlb3JTZGtVdGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHMvTWV0ZW9yU2RrVXRpbHNcIik7XHJcbmNvbnN0IE1ldGVvclBvc3RNZXNzZW5nZXJfMSA9IHJlcXVpcmUoXCIuL3Bvc3RNZXNzYWdlL01ldGVvclBvc3RNZXNzZW5nZXJcIik7XHJcbmNvbnN0IFRyYW5zYWN0aW9uU2NoZW1hVjJfMSA9IHJlcXVpcmUoXCIuL25lYXItc2NoZW1hL1RyYW5zYWN0aW9uU2NoZW1hVjJcIik7XHJcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcIkBuZWFyLWpzL2NyeXB0b1wiKTtcclxuY29uc3QgY3JlYXRlX2FjdGlvbl8xID0gcmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlLWFjdGlvblwiKTtcclxuY29uc3QgYm5fanNfMSA9IHJlcXVpcmUoXCJibi5qc1wiKTtcclxuY29uc3QgTE9HSU5fV0FMTEVUX1VSTF9TVUZGSVggPSBcIi9sb2dpbi9cIjtcclxuY29uc3QgU0lHTl9XQUxMRVRfVVJMX1NVRkZJWCA9IFwiL3NpZ24vXCI7XHJcbmNvbnN0IE1VTFRJU0lHX0hBU19NRVRIT0QgPSBcImFkZF9yZXF1ZXN0X2FuZF9jb25maXJtXCI7XHJcbmNvbnN0IExPQ0FMX1NUT1JBR0VfS0VZX1NVRkZJWCA9IFwiX21ldGVvcl93YWxsZXRfYXV0aF9rZXlcIjtcclxuY29uc3QgUEVORElOR19BQ0NFU1NfS0VZX1BSRUZJWCA9IFwicGVuZGluZ19rZXlcIjsgLy8gYnJvd3NlciBzdG9yYWdlIGtleSBmb3IgYSBwZW5kaW5nIGFjY2VzcyBrZXkgKGkuZS4ga2V5IGhhcyBiZWVuIGdlbmVyYXRlZCBidXQgd2UgYXJlIG5vdCBzdXJlIGl0IHdhcyBhZGRlZCB5ZXQpXHJcbmNvbnN0IGxvY2FsU3RvcmFnZUFkYXB0ZXIgPSBuZXcgRW52aXJvbm1lbnRTdG9yYWdlVXRpbHNfMS5FbnZpcm9ubWVudFN0YXRlQWRhcHRlcl9TeW5jKHtcclxuICAgIGdldFN0cmluZzogKGtleSkgPT4gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSksXHJcbiAgICBzZXRTdHJpbmc6IChrZXksIHZhbHVlKSA9PiB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSksXHJcbiAgICBjbGVhcjogKGtleSkgPT4gd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSksXHJcbn0pO1xyXG5jb25zdCBzZXNzaW9uQWRhcHRlciA9IG5ldyBFbnZpcm9ubWVudFN0b3JhZ2VVdGlsc18xLkVudmlyb25tZW50U3RhdGVBZGFwdGVyX1N5bmMoe1xyXG4gICAgZ2V0U3RyaW5nOiAoa2V5KSA9PiB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShrZXkpLFxyXG4gICAgc2V0U3RyaW5nOiAoa2V5LCB2YWx1ZSkgPT4gd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSksXHJcbiAgICBjbGVhcjogKGtleSkgPT4gd2luZG93LnNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KSxcclxufSk7XHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGlzIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgbmVhci1hcGktanNgIGFuZCBgQnJvd3NlckxvY2FsU3RvcmFnZUtleVN0b3JlYC5cclxuICogSXQgZGlyZWN0cyB1c2VycyB0byB0aGUgTWV0ZW9yIEV4dGVuc2lvbiBvciAoaWYgbm90IGF2YWlsYWJsZSkgYSBwb3B1cCBvZiB0aGUgTWV0ZW9yIFdhbGxldCB3ZWJzaXRlIGZvciBrZXkgbWFuYWdlbWVudC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBganNcclxuICogaW1wb3J0IHsgTWV0ZW9yV2FsbGV0IH0gZnJvbSBcIkBtZXRlb3J3YWxsZXQvc2RrXCI7XHJcbiAqXHJcbiAqIC8vIGNyZWF0ZSBuZXcgTWV0ZW9yV2FsbGV0IGluc3RhbmNlIChwYXNzaW5nIGluIHlvdXIgaW5pdGlhbGl6ZWQgTmVhciBjb25uZWN0aW9uKVxyXG4gKiBjb25zdCBtZXRlb3JXYWxsZXQgPSBuZXcgTWV0ZW9yV2FsbGV0KHsgbmVhcjogY29ubmVjdGVkTmVhciwgYXBwS2V5UHJlZml4OiAnbXktYXBwJyB9KTtcclxuICpcclxuICogLy8gLS0gb3IgLS0gKGZvciBhIHF1aWNrIGFuZCBkZWZhdWx0IE5lYXIgY29ubmVjdGlvbiBjb25maWcpXHJcbiAqIGNvbnN0IG1ldGVvcldhbGxldCA9IE1ldGVvcldhbGxldC5pbml0KHsgbmV0d29ya0lkOiBcInRlc3RuZXRcIiB9KTtcclxuICpcclxuICogLy8gSWYgbm90IHNpZ25lZCBpbiwgc3RhcnQgdGhlIHNpZ24taW4gZmxvdyB3aXRoIE1ldGVvciBXYWxsZXQuXHJcbiAqIC8vIEtleXMgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIEJyb3dzZXJMb2NhbFN0b3JhZ2VLZXlTdG9yZVxyXG4gKiBpZighbWV0ZW9yV2FsbGV0LmlzU2lnbmVkSW4oKSkge1xyXG4gKiAgIGNvbnN0IHsgYWNjb3VudElkIH0gPSBhd2FpdCBtZXRlb3JXYWxsZXQucmVxdWVzdFNpZ25JbigpO1xyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxuY2xhc3MgTWV0ZW9yV2FsbGV0IHtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGVhc2llc3Qgd2F5IHRvIHNldCB1cCB0aGUgU0RLLiBSZXR1cm5zIGFuIGluc3RhbmNlIG9mIE1ldGVvcldhbGxldCwgYXV0b21hdGljYWxseSBjb25uZWN0ZWQgdG8gdGhlIE5lYXIgQVBJLlxyXG4gICAgICpcclxuICAgICAqIElmIHlvdSBuZWVkIG1vcmUgY29udHJvbCBvdmVyIHRoZSBOZWFyIE5ldHdvcmsgY29uZmlndXJhdGlvbi0gcmF0aGVyIHVzZSB7QGxpbmsgTWV0ZW9yV2FsbGV0OmNvbnN0cnVjdG9yfVxyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBgYGBqc1xyXG4gICAgICogY29uc3Qgd2FsbGV0ID0gYXdhaXQgTWV0ZW9yV2FsbGV0LmluaXQoeyBuZXR3b3JrSWQ6IFwidGVzdG5ldFwiIH0pO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhc3luYyBpbml0KHsgd2FsbGV0VXJsLCAuLi5jb25maWcgfSkge1xyXG4gICAgICAgIGNvbnN0IGtleVN0b3JlID0gbmV3IG5lYXJfYXBpX2pzXzEua2V5U3RvcmVzLkJyb3dzZXJMb2NhbFN0b3JhZ2VLZXlTdG9yZSgpO1xyXG4gICAgICAgIGNvbnN0IG5lYXIgPSBhd2FpdCAoMCwgbmVhcl9hcGlfanNfMS5jb25uZWN0KSh7XHJcbiAgICAgICAgICAgIGtleVN0b3JlLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7fSxcclxuICAgICAgICAgICAgd2FsbGV0VXJsOiAoMCwgTWV0ZW9yU2RrVXRpbHNfMS5yZXNvbHZlV2FsbGV0VXJsKShjb25maWcubmV0d29ya0lkLCB3YWxsZXRVcmwpLFxyXG4gICAgICAgICAgICAuLi4oMCwgTWV0ZW9yU2RrVXRpbHNfMS5nZXROZXR3b3JrUHJlc2V0KShjb25maWcubmV0d29ya0lkKSxcclxuICAgICAgICAgICAgLi4uY29uZmlnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHdhbGxldCA9IG5ldyBNZXRlb3JXYWxsZXQoeyBuZWFyLCBhcHBLZXlQcmVmaXg6IFwibmVhcl9hcHBcIiB9KTtcclxuICAgICAgICAvLyBDbGVhbnVwIHVwIGFueSBwZW5kaW5nIGtleXMgKGNhbmNlbGxlZCBsb2dpbnMpLlxyXG4gICAgICAgIGlmICghd2FsbGV0LmlzU2lnbmVkSW4oKSkge1xyXG4gICAgICAgICAgICBhd2FpdCBrZXlTdG9yZS5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gd2FsbGV0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3QgTWV0ZW9yV2FsbGV0LiBJZiB5b3UnZCBhIHF1aWNrIGFuZCBkZWZhdWx0IHdheSwgeW91IGNhbiBhbHNvIHVzZSB7QGxpbmsgTWV0ZW9yV2FsbGV0LmluaXR9XHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGBgYGpzXHJcbiAgICAgKiAvLyBjcmVhdGUgbmV3IE1ldGVvcldhbGxldCBpbnN0YW5jZSAocGFzc2luZyBpbiB5b3VyIGluaXRpYWxpemVkIE5lYXIgY29ubmVjdGlvbilcclxuICAgICAqIGNvbnN0IG1ldGVvcldhbGxldCA9IG5ldyBNZXRlb3JXYWxsZXQoeyBuZWFyOiBjb25uZWN0ZWROZWFyLCBhcHBLZXlQcmVmaXg6ICdteS1hcHAnIH0pO1xyXG4gICAgICpcclxuICAgICAqIGlmKCFtZXRlb3JXYWxsZXQuaXNTaWduZWRJbigpKSB7XHJcbiAgICAgKiAgIGNvbnN0IHsgYWNjb3VudElkIH0gPSBhd2FpdCBtZXRlb3JXYWxsZXQucmVxdWVzdFNpZ25JbigpO1xyXG4gICAgICogfVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHsgbmVhciwgYXBwS2V5UHJlZml4ID0gbmVhci5jb25maWcuY29udHJhY3ROYW1lID8/IFwiZGVmYXVsdFwiLCB9KSB7XHJcbiAgICAgICAgLyoqIEBoaWRkZW4gKi9cclxuICAgICAgICB0aGlzLl9pbml0aWFsaXphdGlvblByb21pc2VzID0gW107XHJcbiAgICAgICAgdGhpcy5fbmVhciA9IG5lYXI7XHJcbiAgICAgICAgY29uc3QgYXV0aERhdGFLZXkgPSBhcHBLZXlQcmVmaXggKyBMT0NBTF9TVE9SQUdFX0tFWV9TVUZGSVg7XHJcbiAgICAgICAgdGhpcy5fYXV0aERhdGFLZXkgPSBhdXRoRGF0YUtleTtcclxuICAgICAgICB0aGlzLl9hdXRoRGF0YSA9IGxvY2FsU3RvcmFnZUFkYXB0ZXIuZ2V0SnNvbihhdXRoRGF0YUtleSkgPz8geyBhbGxLZXlzOiBbXSB9O1xyXG4gICAgICAgIHRoaXMuX25ldHdvcmtJZCA9IG5lYXIuY29uZmlnLm5ldHdvcmtJZDtcclxuICAgICAgICB0aGlzLl93YWxsZXRCYXNlVXJsID0gbmVhci5jb25maWcud2FsbGV0VXJsO1xyXG4gICAgICAgIHRoaXMuX2tleVN0b3JlID0gbmVhci5jb25uZWN0aW9uLnNpZ25lci5rZXlTdG9yZTtcclxuICAgICAgICAvKlxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiSW5pdGlhbGl6ZWQgd2FsbGV0LSBjaGVja2luZyBpZiBzaWduZWQgaW5cIik7XHJcbiAgICBcclxuICAgICAgICBpZiAoIXRoaXMuaXNTaWduZWRJbigpKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvbXBsZXRpbmcgc2lnbi1pbiBwcm9jZXNzLCBpZiBpdHMgYXZhaWxhYmxlXCIpO1xyXG4gICAgICAgICAgdGhpcy5faW5pdGlhbGl6YXRpb25Qcm9taXNlcy5wdXNoKHRoaXMuX2NvbXBsZXRlU2lnbkluV2l0aEFjY2Vzc0tleSgpKTtcclxuICAgICAgICB9Ki9cclxuICAgIH1cclxuICAgIC8qIGFzeW5jIGluaXRpYWxpemUoKSB7XHJcbiAgICAgICBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLl9pbml0aWFsaXphdGlvblByb21pc2VzKTtcclxuICAgICB9Ki9cclxuICAgIGlzRXh0ZW5zaW9uSW5zdGFsbGVkKCkge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cubWV0ZW9yV2FsbGV0ICE9IG51bGw7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdHJ1ZSwgaWYgdGhpcyBhcHAgaXMgYXV0aG9yaXplZCB3aXRoIGFuIGFjY291bnQgaW4gdGhlIHdhbGxldC5cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBgYGBqc1xyXG4gICAgICogY29uc3Qgd2FsbGV0ID0gbmV3IE1ldGVvcldhbGxldCh7IG5lYXI6IGNvbm5lY3RlZE5lYXIsIGFwcEtleVByZWZpeDogJ215LWFwcCcgfSk7XHJcbiAgICAgKiB3YWxsZXQuaXNTaWduZWRJbigpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGlzU2lnbmVkSW4oKSB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fYXV0aERhdGEuYWNjb3VudElkO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGF1dGhvcml6ZWQgQWNjb3VudCBJRC5cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBgYGBqc1xyXG4gICAgICogY29uc3Qgd2FsbGV0ID0gbmV3IE1ldGVvcldhbGxldChuZWFyLCAnbXktYXBwJyk7XHJcbiAgICAgKiBjb25zdCBhY2NvdW50SWQgPSB3YWxsZXQuZ2V0QWNjb3VudElkKCk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgZ2V0QWNjb3VudElkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hdXRoRGF0YS5hY2NvdW50SWQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFZlcmlmaWVzIHRoYXQgdGhlIHVzZXIgaXMgdGhlIG93bmVyIG9mIGEgc3BlY2lmaWMgTmVhciBhY2NvdW50LCBhdmFpbGFibGUgaW4gdGhlIHdhbGxldC5cclxuICAgICAqIFJlbW92ZXMgdGhlIG5lZWQgdG8gZG8gYmxvY2tjaGFpbiBvcGVyYXRpb25zIGZvciBzaW1wbGUgRGFwcCBhY3Rpb25zLlxyXG4gICAgICogU2lnbnMgYSBwYXlsb2FkIHdpdGggdGhlIHdhbGxldCdzIHByaXZhdGUga2V5LiBXaWxsIHJldHVybiBhIHByb21pc2Ugd2l0aCBhIHBheWxvYWQgbGlrZSBzbzpcclxuICAgICAqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogaW50ZXJmYWNlIFZlcmlmaWVkT3duZXIge1xyXG4gICAgICogICBhY2NvdW50SWQ6IHN0cmluZztcclxuICAgICAqICAgbWVzc2FnZTogc3RyaW5nOyAgICAgICAgICAgICAgICAgLy8gVGhlIHNhbWUgcGFzc2VkIG1lc3NhZ2UsIHVuZW5jcnlwdGVkXHJcbiAgICAgKiAgIGJsb2NrSWQ6IHN0cmluZztcclxuICAgICAqICAgcHVibGljS2V5OiBzdHJpbmc7ICAgICAgICAgICAgICAgLy8gVGhlIHB1YmxpYyBrZXkgd2hpY2ggc2hvdWxkIGJlIHZlcmlmaWVkIGFzIGJlbG9uZ2luZyB0byB0aGlzIGFjY291bnRcclxuICAgICAqICAgc2lnbmF0dXJlOiBzdHJpbmc7ICAgICAgICAgICAgICAgLy8gVGhlIHNpZ25lZCBwYXlsb2FkICh0aGlzIGV4YWN0IHNhbWUgb2JqZWN0IEpTT04gc3RyaW5naWZpZWQsIGV4Y2x1ZGluZyB0aGlzIFwic2lnbmF0dXJlXCIgcHJvcGVydHkpXHJcbiAgICAgKiAgIGtleVR5cGU6IHV0aWxzLmtleV9wYWlyLktleVR5cGU7IC8vIFR5cGUgZnJvbSBpbnNpZGUgdGhlIG5lYXItYXBpLWpzIHBhY2thZ2VcclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIG9yIHRocm93IGEge0BsaW5rIE1ldGVvckFjdGlvbkVycm9yfSBlcnJvciBpZiB0aGUgdmVyaWZpY2F0aW9uIGZhaWxlZCBmb3Igd2hhdGV2ZXIgcmVhc29uLlxyXG4gICAgICogKi9cclxuICAgIGFzeW5jIHZlcmlmeU93bmVyKG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBhY2NvdW50SWQgPSBvcHRpb25zLmFjY291bnRJZCA/PyB0aGlzLmdldEFjY291bnRJZCgpO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIE1ldGVvclBvc3RNZXNzZW5nZXJfMS5nZXRNZXRlb3JQb3N0TWVzc2VuZ2VyKSgpLmNvbm5lY3RBbmRXYWl0Rm9yUmVzcG9uc2Uoe1xyXG4gICAgICAgICAgICBhY3Rpb25UeXBlOiB0eXBlc19kYXBwQ29ubmVjdF8xLkVFeHRlcm5hbEFjdGlvblR5cGUudmVyaWZ5X293bmVyLFxyXG4gICAgICAgICAgICBpbnB1dHM6IHtcclxuICAgICAgICAgICAgICAgIGFjY291bnRJZCxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG9wdGlvbnMubWVzc2FnZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbmV0d29yazogdGhpcy5fbmV0d29ya0lkLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyB0eXBlc19kYXBwQ29ubmVjdF8xLk1ldGVvckFjdGlvbkVycm9yKHtcclxuICAgICAgICAgICAgICAgIGVuZFRhZ3M6IHJlc3BvbnNlLmVuZFRhZ3MsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXNwb25zZS5tZXNzYWdlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlcXVlc3RzIGEgc2lnbi1pbiB1c2luZyBNZXRlb3IgV2FsbGV0LiBXaWxsIHJldHVybiBhIHByb21pc2Ugd2l0aCB0aGUgYGFjY291bnRJZGAgb2YgdGhlXHJcbiAgICAgKiBzaWduZWQtaW4gYWNjb3VudCwgb3IgdGhyb3cgYSB7QGxpbmsgTWV0ZW9yQWN0aW9uRXJyb3J9IGVycm9yIGlmIHRoZSBzaWduLWluIGZhaWxlZCBmb3Igd2hhdGV2ZXIgcmVhc29uLlxyXG4gICAgICogKi9cclxuICAgIGFzeW5jIHJlcXVlc3RTaWduSW4ob3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IHsga2V5UGFpciwgLi4ucmVzdE9wdGlvbnMgfSA9IG9wdGlvbnM7XHJcbiAgICAgICAgY29uc3QgYWNjZXNzS2V5ID0ga2V5UGFpciA/PyBuZWFyX2FwaV9qc18xLktleVBhaXIuZnJvbVJhbmRvbShcImVkMjU1MTlcIik7XHJcbiAgICAgICAgbGV0IHVzaW5nUHVibGljS2V5ID0gYWNjZXNzS2V5LmdldFB1YmxpY0tleSgpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgTWV0ZW9yUG9zdE1lc3Nlbmdlcl8xLmdldE1ldGVvclBvc3RNZXNzZW5nZXIpKCkuY29ubmVjdEFuZFdhaXRGb3JSZXNwb25zZSh7XHJcbiAgICAgICAgICAgIGFjdGlvblR5cGU6IHR5cGVzX2RhcHBDb25uZWN0XzEuRUV4dGVybmFsQWN0aW9uVHlwZS5sb2dpbixcclxuICAgICAgICAgICAgaW5wdXRzOiB7IHB1YmxpY19rZXk6IHVzaW5nUHVibGljS2V5LCAuLi5yZXN0T3B0aW9ucyB9LFxyXG4gICAgICAgICAgICBuZXR3b3JrOiB0aGlzLl9uZXR3b3JrSWQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgY29uc3QgeyBhbGxLZXlzLCBhY2NvdW50SWQgfSA9IHJlc3BvbnNlLnBheWxvYWQ7XHJcbiAgICAgICAgICAgIHRoaXMuX2F1dGhEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgYWNjb3VudElkLFxyXG4gICAgICAgICAgICAgICAgYWxsS2V5cyxcclxuICAgICAgICAgICAgICAgIHNpZ25lZEluQ29udHJhY3Q6IHtcclxuICAgICAgICAgICAgICAgICAgICBjb250cmFjdF9pZDogcmVzdE9wdGlvbnMuY29udHJhY3RfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgcHVibGljX2tleTogdXNpbmdQdWJsaWNLZXksXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2VBZGFwdGVyLnNldEpzb24odGhpcy5fYXV0aERhdGFLZXksIHRoaXMuX2F1dGhEYXRhKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fa2V5U3RvcmUuc2V0S2V5KHRoaXMuX25ldHdvcmtJZCwgYWNjb3VudElkLCBhY2Nlc3NLZXkpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGVuZFRhZ3M6IFtdLFxyXG4gICAgICAgICAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjY2Vzc0tleSxcclxuICAgICAgICAgICAgICAgICAgICBhY2NvdW50SWQsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IHR5cGVzX2RhcHBDb25uZWN0XzEuTWV0ZW9yQWN0aW9uRXJyb3Ioe1xyXG4gICAgICAgICAgICAgICAgZW5kVGFnczogcmVzcG9uc2UuZW5kVGFncyxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3BvbnNlLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2lnbiBvdXQgZnJvbSB0aGUgY3VycmVudCBhY2NvdW50XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHNpZ25PdXQoKSB7XHJcbiAgICAgICAgY29uc3QgYWNjb3VudElkID0gdGhpcy5nZXRBY2NvdW50SWQoKTtcclxuICAgICAgICBpZiAodGhpcy5fYXV0aERhdGEuc2lnbmVkSW5Db250cmFjdCAhPSBudWxsICYmIGFjY291bnRJZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlucHV0cyA9IHtcclxuICAgICAgICAgICAgICAgIGFjY291bnRJZCxcclxuICAgICAgICAgICAgICAgIGNvbnRyYWN0SW5mbzogdGhpcy5fYXV0aERhdGEuc2lnbmVkSW5Db250cmFjdCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgTWV0ZW9yUG9zdE1lc3Nlbmdlcl8xLmdldE1ldGVvclBvc3RNZXNzZW5nZXIpKCkuY29ubmVjdEFuZFdhaXRGb3JSZXNwb25zZSh7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb25UeXBlOiB0eXBlc19kYXBwQ29ubmVjdF8xLkVFeHRlcm5hbEFjdGlvblR5cGUubG9nb3V0LFxyXG4gICAgICAgICAgICAgICAgaW5wdXRzLFxyXG4gICAgICAgICAgICAgICAgbmV0d29yazogdGhpcy5fbmV0d29ya0lkLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fYXV0aERhdGEgPSB7IGFsbEtleXM6IFtdIH07XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlQWRhcHRlci5jbGVhcih0aGlzLl9hdXRoRGF0YUtleSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFsbG93cyB1c2VycyB0byBzaWduIGEgbWVzc2FnZSBmb3IgYSBzcGVjaWZpYyByZWNpcGllbnQgdXNpbmcgdGhlaXIgTkVBUiBhY2NvdW50LCBiYXNlZCBvbiB0aGUgW05FUDQxM10oaHR0cHM6Ly9naXRodWIuY29tL25lYXIvTkVQcy9wdWxsLzQxMykuXHJcbiAgICAgKlxyXG4gICAgICogV2lsbCByZXR1cm4gYSBwcm9taXNlIHdpdGggYSBwYXlsb2FkIGxpa2Ugc286XHJcbiAgICAgKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqIGludGVyZmFjZSBzaWduTWVzc2FnZSB7XHJcbiAgICAgKiAgIGFjY291bnRJZDogc3RyaW5nOyAgICAgICAgICAgICAgIC8vIFRoZSBhY2NvdW50IG5hbWUgdG8gd2hpY2ggdGhlIHB1YmxpY0tleSBjb3JyZXNwb25kcyBhcyBwbGFpbiB0ZXh0XHJcbiAgICAgKiAgIHB1YmxpY0tleTogc3RyaW5nOyAgICAgICAgICAgICAgIC8vIFRoZSBwdWJsaWMgY291bnRlcnBhcnQgb2YgdGhlIGtleSB1c2VkIHRvIHNpZ25cclxuICAgICAqICAgc2lnbmF0dXJlOiBzdHJpbmc7ICAgICAgICAgICAgICAgLy8gVGhlIGJhc2U2NCByZXByZXNlbnRhdGlvbiBvZiB0aGUgc2lnbmF0dXJlXHJcbiAgICAgKiAgIHN0YXRlPzogc3RyaW5nOyAgICAgICAgICAgICAgICAgIC8vIFRoZSBzYW1lIHN0YXRlIHBhc3NlZCBpbi5cclxuICAgICAqIH1cclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIG9yIHRocm93IGEge0BsaW5rIE1ldGVvckFjdGlvbkVycm9yfSBlcnJvciBpZiB0aGUgc2lnbmluZyBmYWlsZWQgZm9yIHdoYXRldmVyIHJlYXNvbi5cclxuICAgICAqICovXHJcbiAgICBhc3luYyBzaWduTWVzc2FnZSh7IG1lc3NhZ2UsIG5vbmNlLCByZWNpcGllbnQsIGNhbGxiYWNrVXJsLCBzdGF0ZSwgYWNjb3VudElkLCB9KSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgTWV0ZW9yUG9zdE1lc3Nlbmdlcl8xLmdldE1ldGVvclBvc3RNZXNzZW5nZXIpKCkuY29ubmVjdEFuZFdhaXRGb3JSZXNwb25zZSh7XHJcbiAgICAgICAgICAgIGFjdGlvblR5cGU6IHR5cGVzX2RhcHBDb25uZWN0XzEuRUV4dGVybmFsQWN0aW9uVHlwZS5zaWduX21lc3NhZ2UsXHJcbiAgICAgICAgICAgIGlucHV0czoge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSxcclxuICAgICAgICAgICAgICAgIG5vbmNlLFxyXG4gICAgICAgICAgICAgICAgcmVjaXBpZW50LFxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tVcmwsXHJcbiAgICAgICAgICAgICAgICBzdGF0ZSxcclxuICAgICAgICAgICAgICAgIGFjY291bnRJZCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbmV0d29yazogdGhpcy5fbmV0d29ya0lkLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlLnBheWxvYWQuc3RhdGUgPSBzdGF0ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IHR5cGVzX2RhcHBDb25uZWN0XzEuTWV0ZW9yQWN0aW9uRXJyb3Ioe1xyXG4gICAgICAgICAgICAgICAgZW5kVGFnczogcmVzcG9uc2UuZW5kVGFncyxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3BvbnNlLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2lnbiB0cmFuc2FjdGlvbnMgdXNpbmcgTWV0ZW9yIFdhbGxldC4gV2lsbCByZXR1cm4gYSBwcm9taXNlIHdpdGggYW4gYXJyYXkgb2YgYEZpbmFsRXhlY3V0aW9uT3V0Y29tZWBcclxuICAgICAqIG9mIHRoZSBnaXZlbiB0cmFuc2FjdGlvbnMuXHJcbiAgICAgKiAqL1xyXG4gICAgYXN5bmMgcmVxdWVzdFNpZ25UcmFuc2FjdGlvbnMoaW5wdXRzKSB7XHJcbiAgICAgICAgY29uc3QgeyB0cmFuc2FjdGlvbnMgfSA9IGlucHV0cztcclxuICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZFRyYW5zYWN0aW9ucyA9IGF3YWl0IHRoaXMudHJhbnNmb3JtVHJhbnNhY3Rpb25zKHRyYW5zYWN0aW9ucyk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJUcmFuc2Zvcm1lZCB0cmFuc2FjdGlvbnNcIiwgdHJhbnNmb3JtZWRUcmFuc2FjdGlvbnMpO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIE1ldGVvclBvc3RNZXNzZW5nZXJfMS5nZXRNZXRlb3JQb3N0TWVzc2VuZ2VyKSgpLmNvbm5lY3RBbmRXYWl0Rm9yUmVzcG9uc2Uoe1xyXG4gICAgICAgICAgICBhY3Rpb25UeXBlOiB0eXBlc19kYXBwQ29ubmVjdF8xLkVFeHRlcm5hbEFjdGlvblR5cGUuc2lnbixcclxuICAgICAgICAgICAgaW5wdXRzOiB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbnM6IHRyYW5zZm9ybWVkVHJhbnNhY3Rpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgodHJhbnNhY3Rpb24pID0+ICgwLCBib3JzaF8xLnNlcmlhbGl6ZSkoVHJhbnNhY3Rpb25TY2hlbWFWMl8xLlNDSEVNQV9WMiwgdHJhbnNhY3Rpb24pKVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKHNlcmlhbGl6ZWQpID0+IEJ1ZmZlci5mcm9tKHNlcmlhbGl6ZWQpLnRvU3RyaW5nKFwiYmFzZTY0XCIpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5qb2luKFwiLFwiKSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gaW5wdXRzOiB7IHB1YmxpY19rZXk6IHVzaW5nUHVibGljS2V5LCAuLi5vcHRpb25zIH0sXHJcbiAgICAgICAgICAgIG5ldHdvcms6IHRoaXMuX25ldHdvcmtJZCxcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkZpbmlzaGVkIHNpZ24taW4gcmVxdWVzdFwiLCByZXNwb25zZSk7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnBheWxvYWQuZXhlY3V0aW9uT3V0Y29tZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgdHlwZXNfZGFwcENvbm5lY3RfMS5NZXRlb3JBY3Rpb25FcnJvcih7XHJcbiAgICAgICAgICAgICAgICBlbmRUYWdzOiByZXNwb25zZS5lbmRUYWdzLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogcmVzcG9uc2UubWVzc2FnZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IGNvbm5lY3RlZCB3YWxsZXQgYWNjb3VudFxyXG4gICAgICovXHJcbiAgICBhY2NvdW50KCkge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRBY2NvdW50SWQgPSB0aGlzLmdldEFjY291bnRJZCgpO1xyXG4gICAgICAgIGlmICgoMCwgU3RyaW5nVXRpbHNfMS5ub3ROdWxsRW1wdHkpKGN1cnJlbnRBY2NvdW50SWQpICYmXHJcbiAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3RlZEFjY291bnQ/LmFjY291bnRJZCAhPT0gY3VycmVudEFjY291bnRJZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0ZWRBY2NvdW50ID0gbmV3IENvbm5lY3RlZE1ldGVvcldhbGxldEFjY291bnQodGhpcywgdGhpcy5fbmVhci5jb25uZWN0aW9uLCBjdXJyZW50QWNjb3VudElkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3RlZEFjY291bnQ7XHJcbiAgICB9XHJcbiAgICBhc3luYyB0cmFuc2Zvcm1UcmFuc2FjdGlvbnModHJhbnNhY3Rpb25zKSB7XHJcbiAgICAgICAgY29uc3QgYWNjb3VudCA9IHRoaXMuYWNjb3VudCgpO1xyXG4gICAgICAgIGNvbnN0IHsgbmV0d29ya0lkLCBzaWduZXIsIHByb3ZpZGVyIH0gPSBhY2NvdW50LmNvbm5lY3Rpb247XHJcbiAgICAgICAgY29uc3QgbG9jYWxLZXkgPSBhd2FpdCBzaWduZXIuZ2V0UHVibGljS2V5KGFjY291bnQuYWNjb3VudElkLCBuZXR3b3JrSWQpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbCh0cmFuc2FjdGlvbnMubWFwKGFzeW5jICh0cmFuc2FjdGlvbiwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYWNjZXNzS2V5ID0gYXdhaXQgYWNjb3VudC5hY2Nlc3NLZXlGb3JUcmFuc2FjdGlvbihsb2NhbEtleSk7XHJcbiAgICAgICAgICAgIGlmICghYWNjZXNzS2V5KSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmaW5kIG1hdGNoaW5nIGtleSBmb3IgdHJhbnNhY3Rpb24gc2VudCB0byAke3RyYW5zYWN0aW9uLnJlY2VpdmVySWR9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtZWRBY3Rpb25zID0gdHJhbnNhY3Rpb24uYWN0aW9ucy5tYXAoKGFjdGlvbikgPT4gKDAsIGNyZWF0ZV9hY3Rpb25fMS5jcmVhdGVBY3Rpb24pKGFjdGlvbikpO1xyXG4gICAgICAgICAgICBjb25zdCBibG9jayA9IGF3YWl0IHByb3ZpZGVyLmJsb2NrKHsgZmluYWxpdHk6IFwiZmluYWxcIiB9KTtcclxuICAgICAgICAgICAgcmV0dXJuICgwLCB0cmFuc2FjdGlvbnNfMS5jcmVhdGVUcmFuc2FjdGlvbikoYWNjb3VudC5hY2NvdW50SWQsIGNyeXB0b18xLlB1YmxpY0tleS5mcm9tKGFjY2Vzc0tleS5wdWJsaWNfa2V5KSwgdHJhbnNhY3Rpb24ucmVjZWl2ZXJJZCwgbmV3IGJuX2pzXzEuQk4oYWNjZXNzS2V5LmFjY2Vzc19rZXkubm9uY2UpLmFkZChuZXcgYm5fanNfMS5CTihpbmRleCkpLmFkZChuZXcgYm5fanNfMS5CTigxKSksIHRyYW5zZm9ybWVkQWN0aW9ucywgbmVhcl9hcGlfanNfMS51dGlscy5zZXJpYWxpemUuYmFzZV9kZWNvZGUoYmxvY2suaGVhZGVyLmhhc2gpKTtcclxuICAgICAgICAgICAgLypyZXR1cm4ge1xyXG4gICAgICAgICAgICAgIHJlY2VpdmVySWQ6IHRyYW5zYWN0aW9uLnJlY2VpdmVySWQsXHJcbiAgICAgICAgICAgICAgc2lnbmVySWQ6IGFjY291bnQuYWNjb3VudElkLFxyXG4gICAgICAgICAgICAgIGFjdGlvbnM6IHRyYW5zZm9ybWVkQWN0aW9ucyxcclxuICAgICAgICAgICAgfTsqL1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1ldGVvcldhbGxldCA9IE1ldGVvcldhbGxldDtcclxuLyoqXHJcbiAqIE5lYXIgQWNjb3VudCBpbXBsZW1lbnRhdGlvbiB3aGljaCBtYWtlcyB1c2Ugb2Yge0BsaW5rIE1ldGVvcldhbGxldH0gd2hlbiBubyBsb2NhbCBrZXkgaXMgYXZhaWxhYmxlLlxyXG4gKlxyXG4gKiBHZW5lcmFsbHkgd29uJ3QgYmUgY3JlYXRlZCBkaXJlY3RseS0gY2FuIGJlIG9idGFpbmVkIGJ5IHVzaW5nIHtAbGluayBNZXRlb3JXYWxsZXQuYWNjb3VudH1cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBganNcclxuICogY29uc3QgYWNjb3VudCA9IG1ldGVvcldhbGxldC5hY2NvdW50KCk7XHJcbiAqXHJcbiAqIC8vIHVzZXMgTWV0ZW9yIFdhbGxldCB0byBzaWduIHRoZSB0cmFuc2FjdGlvbiB1c2luZyB0aGlzIGFjY291bnRcclxuICogY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhY2NvdW50LnJlcXVlc3RTaWduVHJhbnNhY3Rpb24oe1xyXG4gKiAgIGFjdGlvbnM6IHRyYW5zYWN0aW9uQWN0aW9ucyxcclxuICogICByZWNlaXZlcklkOiBcIm15LWNvbnRyYWN0XCJcclxuICogfSk7XHJcbiAqIGBgYFxyXG4gKi9cclxuY2xhc3MgQ29ubmVjdGVkTWV0ZW9yV2FsbGV0QWNjb3VudCBleHRlbmRzIG5lYXJfYXBpX2pzXzEuQWNjb3VudCB7XHJcbiAgICAvKiogQGhpZGRlbiAqL1xyXG4gICAgY29uc3RydWN0b3Iod2FsbGV0Q29ubmVjdGlvbiwgY29ubmVjdGlvbiwgYWNjb3VudElkKSB7XHJcbiAgICAgICAgc3VwZXIoY29ubmVjdGlvbiwgYWNjb3VudElkKTtcclxuICAgICAgICB0aGlzLm1ldGVvcldhbGxldCA9IHdhbGxldENvbm5lY3Rpb247XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNpZ24gYSB0cmFuc2FjdGlvbiB1c2luZyBNZXRlb3IgV2FsbGV0LiBPdmVycmlkZXMgdGhlIE5lYXIgQWNjb3VudCBBUEkgbWV0aG9kIG9mIHRoZSBzYW1lIG5hbWUsIG1ha2VzIHVzZSBvZiB7QGxpbmsgQ29ubmVjdGVkTWV0ZW9yV2FsbGV0QWNjb3VudC5zaWduQW5kU2VuZFRyYW5zYWN0aW9uX2RpcmVjdH1cclxuICAgICAqL1xyXG4gICAgYXN5bmMgc2lnbkFuZFNlbmRUcmFuc2FjdGlvbiguLi5hcmdzKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNpZ25BbmRTZW5kVHJhbnNhY3Rpb25fZGlyZWN0KHtcclxuICAgICAgICAgICAgICAgIHJlY2VpdmVySWQ6IGFyZ3NbMF0sXHJcbiAgICAgICAgICAgICAgICBhY3Rpb25zOiBhcmdzWzFdLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2lnbkFuZFNlbmRUcmFuc2FjdGlvbl9kaXJlY3QoYXJnc1swXSk7XHJcbiAgICB9XHJcbiAgICAvKiogQGhpZGRlbiAqL1xyXG4gICAgYXN5bmMgdHJ5U2VuZE9yQ3JlYXRlVHJhbnNhY3Rpb24oeyByZWNlaXZlcklkLCBhY3Rpb25zLCB9KSB7XHJcbiAgICAgICAgY29uc3QgbG9jYWxLZXkgPSBhd2FpdCB0aGlzLmNvbm5lY3Rpb24uc2lnbmVyLmdldFB1YmxpY0tleSh0aGlzLmFjY291bnRJZCwgdGhpcy5jb25uZWN0aW9uLm5ldHdvcmtJZCk7XHJcbiAgICAgICAgbGV0IGFjY2Vzc0tleSA9IGF3YWl0IHRoaXMuYWNjZXNzS2V5Rm9yVHJhbnNhY3Rpb24obG9jYWxLZXkpO1xyXG4gICAgICAgIGlmIChhY2Nlc3NLZXkgIT0gbnVsbCAmJiBhY2Nlc3NLZXkuYWNjZXNzX2tleS5wZXJtaXNzaW9uICE9PSBcIkZ1bGxBY2Nlc3NcIikge1xyXG4gICAgICAgICAgICAvLyBjaGVjayB0aGF0IHRoaXMgaXMgYSB2YWxpZCBhY2Nlc3Mga2V5IGZvciB0aGUgZ2l2ZW4gdHJhbnNhY3Rpb25cclxuICAgICAgICAgICAgY29uc3QgYWNjZXNzS2V5TWF0Y2hlc1RyYW5zYWN0aW9uID0gYXdhaXQgdGhpcy5hY2Nlc3NLZXlNYXRjaGVzVHJhbnNhY3Rpb24oYWNjZXNzS2V5LCByZWNlaXZlcklkLCBhY3Rpb25zKTtcclxuICAgICAgICAgICAgaWYgKCFhY2Nlc3NLZXlNYXRjaGVzVHJhbnNhY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VudDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZXJJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmVySWQ6IHRoaXMuYWNjb3VudElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25zLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhY2Nlc3NLZXkpIHtcclxuICAgICAgICAgICAgaWYgKGxvY2FsS2V5ICYmIGxvY2FsS2V5LnRvU3RyaW5nKCkgPT09IGFjY2Vzc0tleS5wdWJsaWNfa2V5KSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWN1dGlvbk91dGNvbWU6IGF3YWl0IHN1cGVyLnNpZ25BbmRTZW5kVHJhbnNhY3Rpb24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZXJJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbnM6IGFjdGlvbnMubWFwKChhY3Rpb24pID0+ICgwLCBjcmVhdGVfYWN0aW9uXzEuY3JlYXRlQWN0aW9uKShhY3Rpb24pKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbnQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudHlwZSAhPT0gXCJOb3RFbm91Z2hBbGxvd2FuY2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhY2Nlc3NLZXkgPSBhd2FpdCB0aGlzLmFjY2Vzc0tleUZvclRyYW5zYWN0aW9uKHJlY2VpdmVySWQsIGFjdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKmNvbnN0IGJsb2NrID0gYXdhaXQgdGhpcy5jb25uZWN0aW9uLnByb3ZpZGVyLmJsb2NrKHsgZmluYWxpdHk6IFwiZmluYWxcIiB9KTtcclxuICAgICAgICBjb25zdCBibG9ja0hhc2ggPSBiYXNlRGVjb2RlKGJsb2NrLmhlYWRlci5oYXNoKTtcclxuICAgIFxyXG4gICAgICAgIGNvbnN0IHB1YmxpY0tleSA9IHV0aWxzLlB1YmxpY0tleS5mcm9tKGFjY2Vzc0tleS5wdWJsaWNfa2V5KTtcclxuICAgICAgICAvLyBUT0RPOiBDYWNoZSAmIGxpc3RlbiBmb3Igbm9uY2UgdXBkYXRlcyBmb3IgZ2l2ZW4gYWNjZXNzIGtleVxyXG4gICAgICAgIGNvbnN0IG5vbmNlID0gYWNjZXNzS2V5LmFjY2Vzc19rZXkubm9uY2UgKyAxO1xyXG4gICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb25zLmNyZWF0ZVRyYW5zYWN0aW9uKFxyXG4gICAgICAgICAgdGhpcy5hY2NvdW50SWQsXHJcbiAgICAgICAgICBwdWJsaWNLZXksXHJcbiAgICAgICAgICByZWNlaXZlcklkLFxyXG4gICAgICAgICAgbm9uY2UsXHJcbiAgICAgICAgICBhY3Rpb25zLFxyXG4gICAgICAgICAgYmxvY2tIYXNoLFxyXG4gICAgICAgICk7Ki9cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzZW50OiBmYWxzZSxcclxuICAgICAgICAgICAgdHJhbnNhY3Rpb246IHtcclxuICAgICAgICAgICAgICAgIHJlY2VpdmVySWQsXHJcbiAgICAgICAgICAgICAgICBzaWduZXJJZDogdGhpcy5hY2NvdW50SWQsXHJcbiAgICAgICAgICAgICAgICBhY3Rpb25zLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNpZ24gYSB0cmFuc2FjdGlvbiB1c2luZyBNZXRlb3IgV2FsbGV0XHJcbiAgICAgKiBAc2VlIHtAbGluayBNZXRlb3JXYWxsZXQucmVxdWVzdFNpZ25UcmFuc2FjdGlvbnN9XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHNpZ25BbmRTZW5kVHJhbnNhY3Rpb25fZGlyZWN0KHsgcmVjZWl2ZXJJZCwgYWN0aW9ucywgfSkge1xyXG4gICAgICAgIGNvbnN0IHsgdHJhbnNhY3Rpb24sIHNlbnQsIGV4ZWN1dGlvbk91dGNvbWUgfSA9IGF3YWl0IHRoaXMudHJ5U2VuZE9yQ3JlYXRlVHJhbnNhY3Rpb24oeyByZWNlaXZlcklkLCBhY3Rpb25zIH0pO1xyXG4gICAgICAgIGlmIChzZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBleGVjdXRpb25PdXRjb21lO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKGF3YWl0IHRoaXMubWV0ZW9yV2FsbGV0LnJlcXVlc3RTaWduVHJhbnNhY3Rpb25zKHtcclxuICAgICAgICAgICAgdHJhbnNhY3Rpb25zOiBbdHJhbnNhY3Rpb25dLFxyXG4gICAgICAgIH0pKVswXTtcclxuICAgIH1cclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICAvKmFzeW5jIHNpZ25BbmRTZW5kVHJhbnNhY3Rpb25fcmVkaXJlY3Qoe1xyXG4gICAgICByZWNlaXZlcklkLFxyXG4gICAgICBhY3Rpb25zLFxyXG4gICAgICB3YWxsZXRNZXRhLFxyXG4gICAgICB3YWxsZXRDYWxsYmFja1VybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxyXG4gICAgfTogU2lnbkFuZFNlbmRUcmFuc2FjdGlvbk9wdGlvbnMpOiBQcm9taXNlPEZpbmFsRXhlY3V0aW9uT3V0Y29tZT4ge1xyXG4gICAgICBjb25zdCB7IHRyYW5zYWN0aW9uLCBzZW50LCBleGVjdXRpb25PdXRjb21lIH0gPSBhd2FpdCB0aGlzLnRyeVNlbmRPckNyZWF0ZVRyYW5zYWN0aW9uKHsgcmVjZWl2ZXJJZCwgYWN0aW9ucyB9KTtcclxuICBcclxuICAgICAgaWYgKHNlbnQpIHtcclxuICAgICAgICByZXR1cm4gZXhlY3V0aW9uT3V0Y29tZSE7XHJcbiAgICAgIH1cclxuICBcclxuICAgICAgYXdhaXQgdGhpcy5tZXRlb3JXYWxsZXQucmVxdWVzdFNpZ25UcmFuc2FjdGlvbnNfcmVkaXJlY3Qoe1xyXG4gICAgICAgIHRyYW5zYWN0aW9uczogW3RyYW5zYWN0aW9uIV0sXHJcbiAgICAgICAgbWV0YTogd2FsbGV0TWV0YSxcclxuICAgICAgICBjYWxsYmFja191cmw6IHdhbGxldENhbGxiYWNrVXJsLFxyXG4gICAgICB9KTtcclxuICBcclxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcmVkaXJlY3QgdG8gc2lnbiB0cmFuc2FjdGlvblwiKSk7XHJcbiAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSovXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGdpdmVuIGFjY2VzcyBrZXkgYWxsb3dzIHRoZSBmdW5jdGlvbiBjYWxsIG9yIG1ldGhvZCBhdHRlbXB0ZWQgaW4gdHJhbnNhY3Rpb25cclxuICAgICAqIEBwYXJhbSBhY2Nlc3NLZXkgQXJyYXkgb2Yge2FjY2Vzc19rZXk6IEFjY2Vzc0tleSwgcHVibGljX2tleTogUHVibGljS2V5fSBpdGVtc1xyXG4gICAgICogQHBhcmFtIHJlY2VpdmVySWQgVGhlIE5FQVIgYWNjb3VudCBhdHRlbXB0aW5nIHRvIGhhdmUgYWNjZXNzXHJcbiAgICAgKiBAcGFyYW0gYWN0aW9ucyBUaGUgYWN0aW9uKHMpIG5lZWRlZCB0byBiZSBjaGVja2VkIGZvciBhY2Nlc3NcclxuICAgICAqL1xyXG4gICAgYXN5bmMgYWNjZXNzS2V5TWF0Y2hlc1RyYW5zYWN0aW9uKGFjY2Vzc0tleSwgcmVjZWl2ZXJJZCwgYWN0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IHsgYWNjZXNzX2tleTogeyBwZXJtaXNzaW9uIH0sIH0gPSBhY2Nlc3NLZXk7XHJcbiAgICAgICAgaWYgKHBlcm1pc3Npb24gPT09IFwiRnVsbEFjY2Vzc1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZyhcIkNvbXBhcmluZyBhY2Nlc3Mga2V5IGFuZCBhY3Rpb25zXCIsIHtcclxuICAgICAgICAgICAgYWNjZXNzS2V5LFxyXG4gICAgICAgICAgICByZWNlaXZlcklkLFxyXG4gICAgICAgICAgICBhY3Rpb25zLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChwZXJtaXNzaW9uLkZ1bmN0aW9uQ2FsbCkge1xyXG4gICAgICAgICAgICBjb25zdCB7IHJlY2VpdmVyX2lkOiBhbGxvd2VkUmVjZWl2ZXJJZCwgbWV0aG9kX25hbWVzOiBhbGxvd2VkTWV0aG9kcyB9ID0gcGVybWlzc2lvbi5GdW5jdGlvbkNhbGw7XHJcbiAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICAgICAgICAgQWNjZXB0IG11bHRpc2lnIGFjY2VzcyBrZXlzIGFuZCBsZXQgd2FsbGV0cyBhdHRlbXB0IHRvIHNpZ25BbmRTZW5kVHJhbnNhY3Rpb25cclxuICAgICAgICAgICAgIElmIGFuIGFjY2VzcyBrZXkgaGFzIGl0c2VsZiBhcyByZWNlaXZlcklkIGFuZCBtZXRob2QgcGVybWlzc2lvbiBhZGRfcmVxdWVzdF9hbmRfY29uZmlybSwgdGhlbiBpdCBpcyBiZWluZyB1c2VkIGluIGEgd2FsbGV0IHdpdGggbXVsdGlzaWcgY29udHJhY3Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9uZWFyL2NvcmUtY29udHJhY3RzL2Jsb2IvNjcxYzA1ZjA5YWJlY2FiZTdhN2U1OGVmZTk0MjU1MGEzNWZjMzI5Mi9tdWx0aXNpZy9zcmMvbGliLnJzI0wxNDktTDE1M1xyXG4gICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgICAgICAgICAgIGlmIChhbGxvd2VkUmVjZWl2ZXJJZCA9PT0gcmVjZWl2ZXJJZCAmJlxyXG4gICAgICAgICAgICAgICAgYWxsb3dlZE1ldGhvZHMuaW5jbHVkZXMoTVVMVElTSUdfSEFTX01FVEhPRCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhbGxvd2VkUmVjZWl2ZXJJZCA9PT0gcmVjZWl2ZXJJZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbnMubGVuZ3RoICE9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlyc3RBY3Rpb24gPSBhY3Rpb25zWzBdO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZmlyc3RBY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0QWN0aW9uLnR5cGUgPT09IFwiRnVuY3Rpb25DYWxsXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmdW5jdGlvbkNhbGxQYXJhbXMgPSBmaXJzdEFjdGlvbi5wYXJhbXM7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgoIWZ1bmN0aW9uQ2FsbFBhcmFtcy5kZXBvc2l0IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uQ2FsbFBhcmFtcy5kZXBvc2l0LnRvU3RyaW5nKCkgPT09IFwiMFwiKSAmJiAvLyBUT0RPOiBTaG91bGQgc3VwcG9ydCBjaGFyZ2luZyBhbW91bnQgc21hbGxlciB0aGFuIGFsbG93YW5jZT9cclxuICAgICAgICAgICAgICAgICAgICAgICAgKGFsbG93ZWRNZXRob2RzLmxlbmd0aCA9PT0gMCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dlZE1ldGhvZHMuaW5jbHVkZXMoZnVuY3Rpb25DYWxsUGFyYW1zLm1ldGhvZE5hbWUpKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zdCBbeyBmdW5jdGlvbkNhbGwgfV0gPSBhY3Rpb25zO1xyXG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIC8vICAgZnVuY3Rpb25DYWxsICYmXHJcbiAgICAgICAgICAgICAgICAvLyAgICghZnVuY3Rpb25DYWxsLmRlcG9zaXQgfHwgZnVuY3Rpb25DYWxsLmRlcG9zaXQudG9TdHJpbmcoKSA9PT0gXCIwXCIpICYmIC8vIFRPRE86IFNob3VsZCBzdXBwb3J0IGNoYXJnaW5nIGFtb3VudCBzbWFsbGVyIHRoYW4gYWxsb3dhbmNlP1xyXG4gICAgICAgICAgICAgICAgLy8gICAoYWxsb3dlZE1ldGhvZHMubGVuZ3RoID09PSAwIHx8XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgYWxsb3dlZE1ldGhvZHMuaW5jbHVkZXMoZnVuY3Rpb25DYWxsLm1ldGhvZE5hbWUpKVxyXG4gICAgICAgICAgICAgICAgLy8gKTtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IEhhbmRsZSBjYXNlcyB3aGVuIGFsbG93YW5jZSBkb2Vzbid0IGhhdmUgZW5vdWdoIHRvIHBheSBmb3IgZ2FzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVE9ETzogU3VwcG9ydCBvdGhlciBwZXJtaXNzaW9ucyB0aGFuIEZ1bmN0aW9uQ2FsbFxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgYWNjZXNzIGtleSAoaWYgaXQgZXhpc3RzKSB0byB0aGUgcmVjZWl2ZXIgdGhhdCBncmFudHMgdGhlIGRlc2lnbmF0ZWQgcGVybWlzc2lvblxyXG4gICAgICogQHBhcmFtIGxvY2FsS2V5IEEgbG9jYWwgcHVibGljIGtleSBwcm92aWRlZCB0byBjaGVjayBmb3IgYWNjZXNzXHJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlPGFueT5cclxuICAgICAqL1xyXG4gICAgYXN5bmMgYWNjZXNzS2V5Rm9yVHJhbnNhY3Rpb24obG9jYWxLZXkpIHtcclxuICAgICAgICBjb25zdCBhY2Nlc3NLZXlzID0gYXdhaXQgdGhpcy5nZXRBY2Nlc3NLZXlzKCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJhY2Nlc3NLZXlzXCIsIGFjY2Vzc0tleXMpO1xyXG4gICAgICAgIGlmIChsb2NhbEtleSkge1xyXG4gICAgICAgICAgICBjb25zdCBhY2Nlc3NLZXkgPSBhY2Nlc3NLZXlzLmZpbmQoKGtleSkgPT4ga2V5LnB1YmxpY19rZXkudG9TdHJpbmcoKSA9PT0gbG9jYWxLZXkudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIGlmIChhY2Nlc3NLZXkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhY2Nlc3NLZXk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgd2FsbGV0S2V5cyA9IHRoaXMubWV0ZW9yV2FsbGV0Ll9hdXRoRGF0YS5hbGxLZXlzO1xyXG4gICAgICAgIGZvciAoY29uc3QgYWNjZXNzS2V5IG9mIGFjY2Vzc0tleXMpIHtcclxuICAgICAgICAgICAgaWYgKHdhbGxldEtleXMuaW5kZXhPZihhY2Nlc3NLZXkucHVibGljX2tleSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjZXNzS2V5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3QgYWNjZXNzS2V5IG9mIGFjY2Vzc0tleXMpIHtcclxuICAgICAgICAgICAgaWYgKGFjY2Vzc0tleS5hY2Nlc3Nfa2V5LnBlcm1pc3Npb24gPT09IFwiRnVsbEFjY2Vzc1wiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjZXNzS2V5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQ29ubmVjdGVkTWV0ZW9yV2FsbGV0QWNjb3VudCA9IENvbm5lY3RlZE1ldGVvcldhbGxldEFjY291bnQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1ldGVvcldhbGxldC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWalletConstants.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWalletConstants.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.WALLET_URL_LOCALHOST_BASE = exports.WALLET_URL_PRODUCTION_BASE = exports.WALLET_URL_DEV_BASE = void 0;\r\nexports.WALLET_URL_DEV_BASE = \"https://dev.wallet.meteorwallet.app\";\r\nexports.WALLET_URL_PRODUCTION_BASE = \"https://wallet.meteorwallet.app\";\r\nexports.WALLET_URL_LOCALHOST_BASE = \"https://localhost:3000\";\r\n//# sourceMappingURL=MeteorWalletConstants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3Itc2RrL3NyYy9NZXRlb3JXYWxsZXRDb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUNBQWlDLEdBQUcsa0NBQWtDLEdBQUcsMkJBQTJCO0FBQ3BHLDJCQUEyQjtBQUMzQixrQ0FBa0M7QUFDbEMsaUNBQWlDO0FBQ2pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9AbWV0ZW9yd2FsbGV0L3Nkay9kaXN0L21ldGVvci1zZGsvc3JjL01ldGVvcldhbGxldENvbnN0YW50cy5qcz9hYzMxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuV0FMTEVUX1VSTF9MT0NBTEhPU1RfQkFTRSA9IGV4cG9ydHMuV0FMTEVUX1VSTF9QUk9EVUNUSU9OX0JBU0UgPSBleHBvcnRzLldBTExFVF9VUkxfREVWX0JBU0UgPSB2b2lkIDA7XHJcbmV4cG9ydHMuV0FMTEVUX1VSTF9ERVZfQkFTRSA9IFwiaHR0cHM6Ly9kZXYud2FsbGV0Lm1ldGVvcndhbGxldC5hcHBcIjtcclxuZXhwb3J0cy5XQUxMRVRfVVJMX1BST0RVQ1RJT05fQkFTRSA9IFwiaHR0cHM6Ly93YWxsZXQubWV0ZW9yd2FsbGV0LmFwcFwiO1xyXG5leHBvcnRzLldBTExFVF9VUkxfTE9DQUxIT1NUX0JBU0UgPSBcImh0dHBzOi8vbG9jYWxob3N0OjMwMDBcIjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWV0ZW9yV2FsbGV0Q29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWalletConstants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/envConfig.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/envConfig.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.setEnvConfig = exports.envConfig = void 0;\r\nconst MeteorWalletConstants_1 = __webpack_require__(/*! ./MeteorWalletConstants */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWalletConstants.js\");\r\nconst locallySetBaseUrl = typeof window !== \"undefined\"\r\n    ? window.localStorage.getItem(\"DEV__METEOR_WALLET_BASE_URL\")\r\n    : undefined;\r\nexports.envConfig = {\r\n    wallet_base_url: locallySetBaseUrl ?? MeteorWalletConstants_1.WALLET_URL_PRODUCTION_BASE,\r\n};\r\n// console.log(\"Initialized environment\", envConfig);\r\nfunction setEnvConfig(config) {\r\n    Object.assign(exports.envConfig, config);\r\n}\r\nexports.setEnvConfig = setEnvConfig;\r\n//# sourceMappingURL=envConfig.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3Itc2RrL3NyYy9lbnZDb25maWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsaUJBQWlCO0FBQ3hDLGdDQUFnQyxtQkFBTyxDQUFDLG9IQUF5QjtBQUNqRTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVsbG8tbmVhci8uL25vZGVfbW9kdWxlcy9AbWV0ZW9yd2FsbGV0L3Nkay9kaXN0L21ldGVvci1zZGsvc3JjL2VudkNvbmZpZy5qcz9jNTYyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0RW52Q29uZmlnID0gZXhwb3J0cy5lbnZDb25maWcgPSB2b2lkIDA7XHJcbmNvbnN0IE1ldGVvcldhbGxldENvbnN0YW50c18xID0gcmVxdWlyZShcIi4vTWV0ZW9yV2FsbGV0Q29uc3RhbnRzXCIpO1xyXG5jb25zdCBsb2NhbGx5U2V0QmFzZVVybCA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCJcclxuICAgID8gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiREVWX19NRVRFT1JfV0FMTEVUX0JBU0VfVVJMXCIpXHJcbiAgICA6IHVuZGVmaW5lZDtcclxuZXhwb3J0cy5lbnZDb25maWcgPSB7XHJcbiAgICB3YWxsZXRfYmFzZV91cmw6IGxvY2FsbHlTZXRCYXNlVXJsID8/IE1ldGVvcldhbGxldENvbnN0YW50c18xLldBTExFVF9VUkxfUFJPRFVDVElPTl9CQVNFLFxyXG59O1xyXG4vLyBjb25zb2xlLmxvZyhcIkluaXRpYWxpemVkIGVudmlyb25tZW50XCIsIGVudkNvbmZpZyk7XHJcbmZ1bmN0aW9uIHNldEVudkNvbmZpZyhjb25maWcpIHtcclxuICAgIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5lbnZDb25maWcsIGNvbmZpZyk7XHJcbn1cclxuZXhwb3J0cy5zZXRFbnZDb25maWcgPSBzZXRFbnZDb25maWc7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudkNvbmZpZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/envConfig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/index.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.setEnvConfig = exports.ENearNetwork = void 0;\r\n__exportStar(__webpack_require__(/*! ./MeteorWallet */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWallet.js\"), exports);\r\n__exportStar(__webpack_require__(/*! ./utils/MeteorSdkUtils */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/MeteorSdkUtils.js\"), exports);\r\n__exportStar(__webpack_require__(/*! ./MeteorWalletConstants */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWalletConstants.js\"), exports);\r\n__exportStar(__webpack_require__(/*! ../../meteor-common/src/modules_feature/dapp_connect/types_dappConnect */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/types_dappConnect.js\"), exports);\r\nvar near_basic_types_1 = __webpack_require__(/*! ../../meteor-common/src/modules_external/near/types/near_basic_types */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_external/near/types/near_basic_types.js\");\r\nObject.defineProperty(exports, \"ENearNetwork\", ({ enumerable: true, get: function () { return near_basic_types_1.ENearNetwork; } }));\r\nvar envConfig_1 = __webpack_require__(/*! ./envConfig */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/envConfig.js\");\r\nObject.defineProperty(exports, \"setEnvConfig\", ({ enumerable: true, get: function () { return envConfig_1.setEnvConfig; } }));\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3Itc2RrL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyxvQkFBb0I7QUFDM0MsYUFBYSxtQkFBTyxDQUFDLGtHQUFnQjtBQUNyQyxhQUFhLG1CQUFPLENBQUMsa0hBQXdCO0FBQzdDLGFBQWEsbUJBQU8sQ0FBQyxvSEFBeUI7QUFDOUMsYUFBYSxtQkFBTyxDQUFDLCtMQUF3RTtBQUM3Rix5QkFBeUIsbUJBQU8sQ0FBQywyTEFBc0U7QUFDdkcsZ0RBQStDLEVBQUUscUNBQXFDLDJDQUEyQyxFQUFDO0FBQ2xJLGtCQUFrQixtQkFBTyxDQUFDLDRGQUFhO0FBQ3ZDLGdEQUErQyxFQUFFLHFDQUFxQyxvQ0FBb0MsRUFBQztBQUMzSCIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3Itc2RrL3NyYy9pbmRleC5qcz8yZDdiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xyXG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcclxuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KSk7XHJcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0RW52Q29uZmlnID0gZXhwb3J0cy5FTmVhck5ldHdvcmsgPSB2b2lkIDA7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9NZXRlb3JXYWxsZXRcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbHMvTWV0ZW9yU2RrVXRpbHNcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vTWV0ZW9yV2FsbGV0Q29uc3RhbnRzXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuLi8uLi9tZXRlb3ItY29tbW9uL3NyYy9tb2R1bGVzX2ZlYXR1cmUvZGFwcF9jb25uZWN0L3R5cGVzX2RhcHBDb25uZWN0XCIpLCBleHBvcnRzKTtcclxudmFyIG5lYXJfYmFzaWNfdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi9tZXRlb3ItY29tbW9uL3NyYy9tb2R1bGVzX2V4dGVybmFsL25lYXIvdHlwZXMvbmVhcl9iYXNpY190eXBlc1wiKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRU5lYXJOZXR3b3JrXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZWFyX2Jhc2ljX3R5cGVzXzEuRU5lYXJOZXR3b3JrOyB9IH0pO1xyXG52YXIgZW52Q29uZmlnXzEgPSByZXF1aXJlKFwiLi9lbnZDb25maWdcIik7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNldEVudkNvbmZpZ1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW52Q29uZmlnXzEuc2V0RW52Q29uZmlnOyB9IH0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/near-schema/TransactionSchemaV2.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/near-schema/TransactionSchemaV2.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SCHEMA_V2 = void 0;\r\nconst crypto_1 = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/@near-js/crypto/lib/commonjs/index.cjs\");\r\nconst transactions_1 = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/@near-js/transactions/lib/commonjs/index.cjs\");\r\nexports.SCHEMA_V2 = new Map([\r\n    [\r\n        transactions_1.Signature,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"keyType\", \"u8\"],\r\n                [\"data\", [64]],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        transactions_1.SignedTransaction,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"transaction\", transactions_1.Transaction],\r\n                [\"signature\", transactions_1.Signature],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        transactions_1.Transaction,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"signerId\", \"string\"],\r\n                [\"publicKey\", crypto_1.PublicKey],\r\n                [\"nonce\", \"u64\"],\r\n                [\"receiverId\", \"string\"],\r\n                [\"blockHash\", [32]],\r\n                [\"actions\", [transactions_1.Action]],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        crypto_1.PublicKey,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"keyType\", \"u8\"],\r\n                [\"data\", [32]],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        transactions_1.AccessKey,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"nonce\", \"u64\"],\r\n                [\"permission\", transactions_1.AccessKeyPermission],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        transactions_1.AccessKeyPermission,\r\n        {\r\n            kind: \"enum\",\r\n            field: \"enum\",\r\n            values: [\r\n                [\"functionCall\", transactions_1.FunctionCallPermission],\r\n                [\"fullAccess\", transactions_1.FullAccessPermission],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        transactions_1.FunctionCallPermission,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"allowance\", { kind: \"option\", type: \"u128\" }],\r\n                [\"receiverId\", \"string\"],\r\n                [\"methodNames\", [\"string\"]],\r\n            ],\r\n        },\r\n    ],\r\n    [transactions_1.FullAccessPermission, { kind: \"struct\", fields: [] }],\r\n    [\r\n        transactions_1.Action,\r\n        {\r\n            kind: \"enum\",\r\n            field: \"enum\",\r\n            values: [\r\n                [\"createAccount\", transactions_1.CreateAccount],\r\n                [\"deployContract\", transactions_1.DeployContract],\r\n                [\"functionCall\", transactions_1.FunctionCall],\r\n                [\"transfer\", transactions_1.Transfer],\r\n                [\"stake\", transactions_1.Stake],\r\n                [\"addKey\", transactions_1.AddKey],\r\n                [\"deleteKey\", transactions_1.DeleteKey],\r\n                [\"deleteAccount\", transactions_1.DeleteAccount],\r\n                [\"signedDelegate\", transactions_1.SignedDelegate],\r\n            ],\r\n        },\r\n    ],\r\n    [transactions_1.CreateAccount, { kind: \"struct\", fields: [] }],\r\n    [transactions_1.DeployContract, { kind: \"struct\", fields: [[\"code\", [\"u8\"]]] }],\r\n    [\r\n        transactions_1.FunctionCall,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"methodName\", \"string\"],\r\n                [\"args\", [\"u8\"]],\r\n                [\"gas\", \"u64\"],\r\n                [\"deposit\", \"u128\"],\r\n            ],\r\n        },\r\n    ],\r\n    [transactions_1.Transfer, { kind: \"struct\", fields: [[\"deposit\", \"u128\"]] }],\r\n    [\r\n        transactions_1.Stake,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"stake\", \"u128\"],\r\n                [\"publicKey\", crypto_1.PublicKey],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        transactions_1.AddKey,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"publicKey\", crypto_1.PublicKey],\r\n                [\"accessKey\", transactions_1.AccessKey],\r\n            ],\r\n        },\r\n    ],\r\n    [transactions_1.DeleteKey, { kind: \"struct\", fields: [[\"publicKey\", crypto_1.PublicKey]] }],\r\n    [transactions_1.DeleteAccount, { kind: \"struct\", fields: [[\"beneficiaryId\", \"string\"]] }],\r\n    [\r\n        transactions_1.DelegateAction,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"senderId\", \"string\"],\r\n                [\"receiverId\", \"string\"],\r\n                [\"actions\", [transactions_1.Action]],\r\n                [\"nonce\", \"u64\"],\r\n                [\"maxBlockHeight\", \"u64\"],\r\n                [\"publicKey\", crypto_1.PublicKey],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        transactions_1.SignedDelegate,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"delegateAction\", transactions_1.DelegateAction],\r\n                [\"signature\", transactions_1.Signature],\r\n            ],\r\n        },\r\n    ],\r\n]);\r\n//# sourceMappingURL=TransactionSchemaV2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/near-schema/TransactionSchemaV2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/postMessage/MeteorPostMessenger.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/postMessage/MeteorPostMessenger.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getMeteorPostMessenger = void 0;\r\nconst nanoid_1 = __webpack_require__(/*! nanoid */ \"(ssr)/./node_modules/nanoid/index.cjs\");\r\nconst envConfig_1 = __webpack_require__(/*! ../envConfig */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/envConfig.js\");\r\nconst types_dappConnect_1 = __webpack_require__(/*! ../../../meteor-common/src/modules_feature/dapp_connect/types_dappConnect */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/types_dappConnect.js\");\r\nconst query_string_1 = __webpack_require__(/*! query-string */ \"(ssr)/./node_modules/query-string/index.js\");\r\nconst error_handling_dappConnect_1 = __webpack_require__(/*! ../../../meteor-common/src/modules_feature/dapp_connect/error_handling_dappConnect */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/error_handling_dappConnect.js\");\r\nconst constants_theme_1 = __webpack_require__(/*! ../../../meteor-common/src/modules_app_core/theme/constants_theme */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_app_core/theme/constants_theme.js\");\r\nclass ComWindow {\r\n    constructor(connection, listener) {\r\n        const baseWalletUrl = envConfig_1.envConfig.wallet_base_url;\r\n        const url = new URL(baseWalletUrl);\r\n        this.walletOrigin = url.origin;\r\n        if (window.meteorCom == null) {\r\n            this.comType = types_dappConnect_1.EDappActionSource.website_post_message;\r\n            console.log(\"No extension found. Need to connect to web popup for Meteor communication\");\r\n            const queryParams = {\r\n                source: types_dappConnect_1.EDappActionSource.website_post_message,\r\n                connectionUid: connection.uid,\r\n            };\r\n            const w = constants_theme_1.SIGN_POPUP_WIDTH;\r\n            const h = constants_theme_1.SIGN_POPUP_HEIGHT;\r\n            const y = window.top.outerHeight / 2 + window.top.screenY - h / 2;\r\n            const x = window.top.outerWidth / 2 + window.top.screenX - w / 2;\r\n            const newWindow = window.open(`${baseWalletUrl}/connect/${connection.network}/${connection.actionType}?${(0, query_string_1.stringify)(queryParams)}`, \"_blank\", `popup=1,width=${w},height=${h},top=${y},left=${x}`);\r\n            if (newWindow != null) {\r\n                this.websiteWindow = newWindow;\r\n            }\r\n            else {\r\n                throw new types_dappConnect_1.MeteorActionError({\r\n                    message: \"Couldn't open popup window to complete wallet action\",\r\n                    endTags: [error_handling_dappConnect_1.EDappActionErrorTag.POPUP_WINDOW_OPEN_FAILED],\r\n                });\r\n            }\r\n            window.addEventListener(\"message\", (event) => listener(event.data));\r\n            this.wasOpened = false;\r\n        }\r\n        else {\r\n            this.comType = types_dappConnect_1.EDappActionSource.extension_injected;\r\n            this.wasOpened = true;\r\n            // console.log(\"Need to communicate with the extension!\");\r\n            window.meteorCom.addMessageDataListener(listener);\r\n        }\r\n    }\r\n    focus() {\r\n        if (this.comType === types_dappConnect_1.EDappActionSource.website_post_message) {\r\n            this.websiteWindow?.focus();\r\n        }\r\n    }\r\n    sendMessage(data) {\r\n        if (this.comType === types_dappConnect_1.EDappActionSource.website_post_message) {\r\n            this.websiteWindow?.postMessage(data, this.walletOrigin);\r\n        }\r\n        else {\r\n            window.meteorCom?.sendMessageData(data);\r\n        }\r\n    }\r\n    isWindowClosed() {\r\n        if (this.comType === types_dappConnect_1.EDappActionSource.website_post_message) {\r\n            return this.websiteWindow?.closed ?? true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    hasActiveWindow() {\r\n        if (this.comType === types_dappConnect_1.EDappActionSource.website_post_message) {\r\n            return this.websiteWindow != null;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    close() {\r\n        if (this.comType === types_dappConnect_1.EDappActionSource.website_post_message) {\r\n            delete this.websiteWindow;\r\n        }\r\n        else {\r\n        }\r\n    }\r\n}\r\nconst pingInterval = 450;\r\nclass MeteorPostMessenger {\r\n    constructor() {\r\n        this.connections = [];\r\n        // const baseUrl = \"https://dev.wallet.meteorwallet.app\";\r\n        const baseUrl = envConfig_1.envConfig.wallet_base_url;\r\n        const url = new URL(baseUrl);\r\n        this.baseWalletUrl = baseUrl;\r\n        this.walletOrigin = url.origin;\r\n        this.listener = (data) => {\r\n            if (data != null) {\r\n                // const data: TClientPostMessageResponse = event.data;\r\n                // console.log(\"Meteor Post Messenger received event with data: \", data);\r\n                const currentConnection = this.connections.find((con) => con.uid === data.uid);\r\n                if (currentConnection != null) {\r\n                    this.updateConnection(currentConnection.uid, {\r\n                        lastConnection: Date.now(),\r\n                    });\r\n                    if (data.status === types_dappConnect_1.EDappActionConnectionStatus.attempting_reconnect) {\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: types_dappConnect_1.EDappActionConnectionStatus.initializing,\r\n                        });\r\n                        this.sendComs();\r\n                    }\r\n                    if (data.status === types_dappConnect_1.EDappActionConnectionStatus.connected &&\r\n                        currentConnection.status ===\r\n                            types_dappConnect_1.EDappActionConnectionStatus.initializing) {\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: types_dappConnect_1.EDappActionConnectionStatus.connected,\r\n                        });\r\n                    }\r\n                    if (data.status === types_dappConnect_1.EDappActionConnectionStatus.closed_success) {\r\n                        currentConnection.resolve({\r\n                            success: true,\r\n                            endTags: [],\r\n                            payload: data.payload,\r\n                        });\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: types_dappConnect_1.EDappActionConnectionStatus.closed_success,\r\n                        });\r\n                        this.sendComs();\r\n                    }\r\n                    if (data.status === types_dappConnect_1.EDappActionConnectionStatus.closed_fail) {\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: types_dappConnect_1.EDappActionConnectionStatus.closed_fail,\r\n                        });\r\n                        this.sendComs();\r\n                        // const error = new MeteorActionError({ endTags: data.endTags });\r\n                        // console.log(\"Ending failure with error\", { ...error });\r\n                        currentConnection.reject(new types_dappConnect_1.MeteorActionError({ endTags: data.endTags }));\r\n                    }\r\n                    if (data.status === types_dappConnect_1.EDappActionConnectionStatus.closed_window) {\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: types_dappConnect_1.EDappActionConnectionStatus.closed_window,\r\n                        });\r\n                        currentConnection.reject(new types_dappConnect_1.MeteorActionError({\r\n                            endTags: data.endTags,\r\n                            message: \"User closed the window\",\r\n                        }));\r\n                    }\r\n                    if ([\r\n                        types_dappConnect_1.EDappActionConnectionStatus.disconnected,\r\n                        types_dappConnect_1.EDappActionConnectionStatus.closed_fail,\r\n                        types_dappConnect_1.EDappActionConnectionStatus.closed_window,\r\n                        types_dappConnect_1.EDappActionConnectionStatus.closed_success,\r\n                    ].includes(data.status)) {\r\n                        this.removeConnection(currentConnection.uid);\r\n                    }\r\n                } /* else {\r\n                  console.warn(`Connection data received but no ID found \"${data.uid}\"`, data);\r\n                }*/\r\n            }\r\n        };\r\n        // window.addEventListener(\"message\", this.listener);\r\n    }\r\n    removeConnection(uid) {\r\n        this.connections = this.connections.filter((con) => con.uid !== uid);\r\n        if (this.connections.length === 0) {\r\n            delete this.comWindow;\r\n            clearInterval(this.comInterval);\r\n            delete this.comInterval;\r\n        }\r\n    }\r\n    updateConnection(uid, newConnectionProperties) {\r\n        this.connections = this.connections.map((con) => {\r\n            if (con.uid === uid) {\r\n                return {\r\n                    ...con,\r\n                    ...newConnectionProperties,\r\n                    uid: con.uid,\r\n                };\r\n            }\r\n            return con;\r\n        });\r\n    }\r\n    sendComs() {\r\n        if (this.comWindow?.hasActiveWindow() && this.connections.length > 0) {\r\n            if (this.comInterval == null) {\r\n                this.comInterval = setInterval(() => this.sendComs(), pingInterval);\r\n            }\r\n            if (this.comWindow.isWindowClosed()) {\r\n                if (this.comWindow.wasOpened) {\r\n                    for (const con of this.connections) {\r\n                        con.reject(new types_dappConnect_1.MeteorActionError({\r\n                            message: \"User closed the window before completing the action\",\r\n                            endTags: [\r\n                                error_handling_dappConnect_1.EDappActionErrorTag.INCOMPLETE_ACTION,\r\n                                error_handling_dappConnect_1.EDappActionErrorTag.WINDOW_CLOSED,\r\n                            ],\r\n                        }));\r\n                    }\r\n                    this.connections = [];\r\n                    this.comWindow.close();\r\n                }\r\n                else {\r\n                    console.log(\"Window is closed, need to allow popup\");\r\n                }\r\n            }\r\n            else {\r\n                this.comWindow.wasOpened = true;\r\n                for (const { network, actionType, endTags, status, inputs, uid } of this\r\n                    .connections) {\r\n                    const postMessage = {\r\n                        endTags,\r\n                        actionType: actionType,\r\n                        status,\r\n                        uid,\r\n                        network,\r\n                    };\r\n                    if (status === types_dappConnect_1.EDappActionConnectionStatus.initializing) {\r\n                        postMessage.inputs = inputs;\r\n                    }\r\n                    this.comWindow.sendMessage(postMessage);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            clearInterval(this.comInterval);\r\n            delete this.comInterval;\r\n        }\r\n    }\r\n    addAndStartConnection(connection) {\r\n        if (this.connections.length > 0) {\r\n            for (const con of this.connections) {\r\n                con.status = types_dappConnect_1.EDappActionConnectionStatus.disconnected;\r\n                con.endTags = [error_handling_dappConnect_1.EDappActionErrorTag.NEW_ACTION_STARTED];\r\n            }\r\n        }\r\n        this.connections.push(connection);\r\n        if (this.comWindow == null || !this.comWindow.hasActiveWindow()) {\r\n            this.comWindow = new ComWindow(connection, this.listener);\r\n        }\r\n        else {\r\n            this.comWindow.focus();\r\n        }\r\n        this.sendComs();\r\n    }\r\n    async connectAndWaitForResponse({ actionType, network, inputs, }) {\r\n        let newConnection = {\r\n            uid: (0, nanoid_1.nanoid)(),\r\n            actionType,\r\n            lastAttemptedConnection: 0,\r\n            lastConnection: 0,\r\n            status: types_dappConnect_1.EDappActionConnectionStatus.initializing,\r\n            promise: undefined,\r\n            reject: undefined,\r\n            resolve: undefined,\r\n            currentPayload: {},\r\n            inputs,\r\n            network,\r\n            endTags: [],\r\n        };\r\n        const promise = new Promise((resolve, reject) => {\r\n            newConnection.resolve = resolve;\r\n            newConnection.reject = (error) => {\r\n                this.connections = this.connections.filter((con) => con.uid !== newConnection.uid);\r\n                reject(error);\r\n            };\r\n        });\r\n        newConnection.promise = promise;\r\n        this.addAndStartConnection(newConnection);\r\n        return await promise;\r\n    }\r\n}\r\nlet postMessenger;\r\nfunction getMeteorPostMessenger() {\r\n    if (postMessenger == null) {\r\n        postMessenger = new MeteorPostMessenger();\r\n    }\r\n    return postMessenger;\r\n}\r\nexports.getMeteorPostMessenger = getMeteorPostMessenger;\r\n//# sourceMappingURL=MeteorPostMessenger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/postMessage/MeteorPostMessenger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/MeteorSdkUtils.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/MeteorSdkUtils.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getNetworkPreset = exports.resolveWalletUrl = void 0;\r\nconst envConfig_1 = __webpack_require__(/*! ../envConfig */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/envConfig.js\");\r\nconst resolveWalletUrl = (network, walletUrl) => {\r\n    if (walletUrl) {\r\n        return walletUrl;\r\n    }\r\n    const base = envConfig_1.envConfig.wallet_base_url;\r\n    switch (network) {\r\n        case \"mainnet\":\r\n            return `${base}/connect/mainnet`;\r\n        case \"testnet\":\r\n            return `${base}/connect/testnet`;\r\n        case \"betanet\":\r\n            return `${base}/connect/betanet`;\r\n        default:\r\n            throw new Error(\"Invalid wallet URL\");\r\n    }\r\n};\r\nexports.resolveWalletUrl = resolveWalletUrl;\r\nconst getNetworkPreset = (networkId) => {\r\n    switch (networkId) {\r\n        case \"mainnet\":\r\n            return {\r\n                networkId,\r\n                nodeUrl: \"https://rpc.mainnet.near.org\",\r\n                helperUrl: \"https://helper.mainnet.near.org\",\r\n                explorerUrl: \"https://explorer.near.org\",\r\n            };\r\n        case \"testnet\":\r\n            return {\r\n                networkId,\r\n                nodeUrl: \"https://rpc.testnet.near.org\",\r\n                helperUrl: \"https://helper.testnet.near.org\",\r\n                explorerUrl: \"https://explorer.testnet.near.org\",\r\n            };\r\n        case \"betanet\":\r\n            return {\r\n                networkId,\r\n                nodeUrl: \"https://rpc.betanet.near.org\",\r\n                helperUrl: \"https://helper.betanet.near.org\",\r\n                explorerUrl: \"https://explorer.betanet.near.org\",\r\n            };\r\n        default:\r\n            throw Error(`Failed to find config for: '${networkId}'`);\r\n    }\r\n};\r\nexports.getNetworkPreset = getNetworkPreset;\r\n//# sourceMappingURL=MeteorSdkUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3Itc2RrL3NyYy91dGlscy9NZXRlb3JTZGtVdGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0IsR0FBRyx3QkFBd0I7QUFDbkQsb0JBQW9CLG1CQUFPLENBQUMsNkZBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsS0FBSztBQUMzQjtBQUNBLHNCQUFzQixLQUFLO0FBQzNCO0FBQ0Esc0JBQXNCLEtBQUs7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELFVBQVU7QUFDakU7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2hlbGxvLW5lYXIvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3Itc2RrL3NyYy91dGlscy9NZXRlb3JTZGtVdGlscy5qcz9mZDRhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuZ2V0TmV0d29ya1ByZXNldCA9IGV4cG9ydHMucmVzb2x2ZVdhbGxldFVybCA9IHZvaWQgMDtcclxuY29uc3QgZW52Q29uZmlnXzEgPSByZXF1aXJlKFwiLi4vZW52Q29uZmlnXCIpO1xyXG5jb25zdCByZXNvbHZlV2FsbGV0VXJsID0gKG5ldHdvcmssIHdhbGxldFVybCkgPT4ge1xyXG4gICAgaWYgKHdhbGxldFVybCkge1xyXG4gICAgICAgIHJldHVybiB3YWxsZXRVcmw7XHJcbiAgICB9XHJcbiAgICBjb25zdCBiYXNlID0gZW52Q29uZmlnXzEuZW52Q29uZmlnLndhbGxldF9iYXNlX3VybDtcclxuICAgIHN3aXRjaCAobmV0d29yaykge1xyXG4gICAgICAgIGNhc2UgXCJtYWlubmV0XCI6XHJcbiAgICAgICAgICAgIHJldHVybiBgJHtiYXNlfS9jb25uZWN0L21haW5uZXRgO1xyXG4gICAgICAgIGNhc2UgXCJ0ZXN0bmV0XCI6XHJcbiAgICAgICAgICAgIHJldHVybiBgJHtiYXNlfS9jb25uZWN0L3Rlc3RuZXRgO1xyXG4gICAgICAgIGNhc2UgXCJiZXRhbmV0XCI6XHJcbiAgICAgICAgICAgIHJldHVybiBgJHtiYXNlfS9jb25uZWN0L2JldGFuZXRgO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgd2FsbGV0IFVSTFwiKTtcclxuICAgIH1cclxufTtcclxuZXhwb3J0cy5yZXNvbHZlV2FsbGV0VXJsID0gcmVzb2x2ZVdhbGxldFVybDtcclxuY29uc3QgZ2V0TmV0d29ya1ByZXNldCA9IChuZXR3b3JrSWQpID0+IHtcclxuICAgIHN3aXRjaCAobmV0d29ya0lkKSB7XHJcbiAgICAgICAgY2FzZSBcIm1haW5uZXRcIjpcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIG5ldHdvcmtJZCxcclxuICAgICAgICAgICAgICAgIG5vZGVVcmw6IFwiaHR0cHM6Ly9ycGMubWFpbm5ldC5uZWFyLm9yZ1wiLFxyXG4gICAgICAgICAgICAgICAgaGVscGVyVXJsOiBcImh0dHBzOi8vaGVscGVyLm1haW5uZXQubmVhci5vcmdcIixcclxuICAgICAgICAgICAgICAgIGV4cGxvcmVyVXJsOiBcImh0dHBzOi8vZXhwbG9yZXIubmVhci5vcmdcIixcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBjYXNlIFwidGVzdG5ldFwiOlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbmV0d29ya0lkLFxyXG4gICAgICAgICAgICAgICAgbm9kZVVybDogXCJodHRwczovL3JwYy50ZXN0bmV0Lm5lYXIub3JnXCIsXHJcbiAgICAgICAgICAgICAgICBoZWxwZXJVcmw6IFwiaHR0cHM6Ly9oZWxwZXIudGVzdG5ldC5uZWFyLm9yZ1wiLFxyXG4gICAgICAgICAgICAgICAgZXhwbG9yZXJVcmw6IFwiaHR0cHM6Ly9leHBsb3Jlci50ZXN0bmV0Lm5lYXIub3JnXCIsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgY2FzZSBcImJldGFuZXRcIjpcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIG5ldHdvcmtJZCxcclxuICAgICAgICAgICAgICAgIG5vZGVVcmw6IFwiaHR0cHM6Ly9ycGMuYmV0YW5ldC5uZWFyLm9yZ1wiLFxyXG4gICAgICAgICAgICAgICAgaGVscGVyVXJsOiBcImh0dHBzOi8vaGVscGVyLmJldGFuZXQubmVhci5vcmdcIixcclxuICAgICAgICAgICAgICAgIGV4cGxvcmVyVXJsOiBcImh0dHBzOi8vZXhwbG9yZXIuYmV0YW5ldC5uZWFyLm9yZ1wiLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBGYWlsZWQgdG8gZmluZCBjb25maWcgZm9yOiAnJHtuZXR3b3JrSWR9J2ApO1xyXG4gICAgfVxyXG59O1xyXG5leHBvcnRzLmdldE5ldHdvcmtQcmVzZXQgPSBnZXROZXR3b3JrUHJlc2V0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1NZXRlb3JTZGtVdGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/MeteorSdkUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/create-action.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/create-action.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.createAction = exports.parseArgs = void 0;\r\nconst bn_js_1 = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\r\nconst transactions_1 = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/@near-js/transactions/lib/commonjs/index.cjs\");\r\nconst crypto_1 = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/@near-js/crypto/lib/commonjs/index.cjs\");\r\nconst getAccessKey = (permission) => {\r\n    if (permission === \"FullAccess\") {\r\n        return transactions_1.actionCreators.fullAccessKey();\r\n    }\r\n    const { receiverId, methodNames = [] } = permission;\r\n    const allowance = permission.allowance\r\n        ? new bn_js_1.BN(permission.allowance)\r\n        : undefined;\r\n    return transactions_1.actionCreators.functionCallAccessKey(receiverId, methodNames, allowance);\r\n};\r\nconst parseArgs = (data) => {\r\n    if (typeof data === \"string\")\r\n        return Buffer.from(data, \"base64\");\r\n    return data;\r\n};\r\nexports.parseArgs = parseArgs;\r\nconst createAction = (action) => {\r\n    switch (action.type) {\r\n        case \"CreateAccount\":\r\n            return transactions_1.actionCreators.createAccount();\r\n        case \"DeployContract\": {\r\n            const { code } = action.params;\r\n            return transactions_1.actionCreators.deployContract(code);\r\n        }\r\n        case \"FunctionCall\": {\r\n            const { methodName, args, gas, deposit } = action.params;\r\n            return transactions_1.actionCreators.functionCall(methodName, (0, exports.parseArgs)(args), new bn_js_1.BN(gas), new bn_js_1.BN(deposit));\r\n        }\r\n        case \"Transfer\": {\r\n            const { deposit } = action.params;\r\n            return transactions_1.actionCreators.transfer(new bn_js_1.BN(deposit));\r\n        }\r\n        case \"Stake\": {\r\n            const { stake, publicKey } = action.params;\r\n            return transactions_1.actionCreators.stake(new bn_js_1.BN(stake), crypto_1.PublicKey.from(publicKey));\r\n        }\r\n        case \"AddKey\": {\r\n            const { publicKey, accessKey } = action.params;\r\n            return transactions_1.actionCreators.addKey(crypto_1.PublicKey.from(publicKey), // TODO: Use accessKey.nonce? near-api-js seems to think 0 is fine?\r\n            getAccessKey(accessKey.permission));\r\n        }\r\n        case \"DeleteKey\": {\r\n            const { publicKey } = action.params;\r\n            return transactions_1.actionCreators.deleteKey(crypto_1.PublicKey.from(publicKey));\r\n        }\r\n        case \"DeleteAccount\": {\r\n            const { beneficiaryId } = action.params;\r\n            return transactions_1.actionCreators.deleteAccount(beneficiaryId);\r\n        }\r\n        default:\r\n            throw new Error(\"Invalid action type\");\r\n    }\r\n};\r\nexports.createAction = createAction;\r\n//# sourceMappingURL=create-action.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3Itc2RrL3NyYy91dGlscy9jcmVhdGUtYWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLGlCQUFpQjtBQUN4QyxnQkFBZ0IsbUJBQU8sQ0FBQyxtREFBTztBQUMvQix1QkFBdUIsbUJBQU8sQ0FBQyxnR0FBdUI7QUFDdEQsaUJBQWlCLG1CQUFPLENBQUMsb0ZBQWlCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwrQkFBK0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQ0FBaUM7QUFDckQ7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFVBQVU7QUFDOUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdUJBQXVCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFlBQVk7QUFDaEM7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby1uZWFyLy4vbm9kZV9tb2R1bGVzL0BtZXRlb3J3YWxsZXQvc2RrL2Rpc3QvbWV0ZW9yLXNkay9zcmMvdXRpbHMvY3JlYXRlLWFjdGlvbi5qcz9kNWQ0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuY3JlYXRlQWN0aW9uID0gZXhwb3J0cy5wYXJzZUFyZ3MgPSB2b2lkIDA7XHJcbmNvbnN0IGJuX2pzXzEgPSByZXF1aXJlKFwiYm4uanNcIik7XHJcbmNvbnN0IHRyYW5zYWN0aW9uc18xID0gcmVxdWlyZShcIkBuZWFyLWpzL3RyYW5zYWN0aW9uc1wiKTtcclxuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiQG5lYXItanMvY3J5cHRvXCIpO1xyXG5jb25zdCBnZXRBY2Nlc3NLZXkgPSAocGVybWlzc2lvbikgPT4ge1xyXG4gICAgaWYgKHBlcm1pc3Npb24gPT09IFwiRnVsbEFjY2Vzc1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uc18xLmFjdGlvbkNyZWF0b3JzLmZ1bGxBY2Nlc3NLZXkoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgcmVjZWl2ZXJJZCwgbWV0aG9kTmFtZXMgPSBbXSB9ID0gcGVybWlzc2lvbjtcclxuICAgIGNvbnN0IGFsbG93YW5jZSA9IHBlcm1pc3Npb24uYWxsb3dhbmNlXHJcbiAgICAgICAgPyBuZXcgYm5fanNfMS5CTihwZXJtaXNzaW9uLmFsbG93YW5jZSlcclxuICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgIHJldHVybiB0cmFuc2FjdGlvbnNfMS5hY3Rpb25DcmVhdG9ycy5mdW5jdGlvbkNhbGxBY2Nlc3NLZXkocmVjZWl2ZXJJZCwgbWV0aG9kTmFtZXMsIGFsbG93YW5jZSk7XHJcbn07XHJcbmNvbnN0IHBhcnNlQXJncyA9IChkYXRhKSA9PiB7XHJcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGRhdGEsIFwiYmFzZTY0XCIpO1xyXG4gICAgcmV0dXJuIGRhdGE7XHJcbn07XHJcbmV4cG9ydHMucGFyc2VBcmdzID0gcGFyc2VBcmdzO1xyXG5jb25zdCBjcmVhdGVBY3Rpb24gPSAoYWN0aW9uKSA9PiB7XHJcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBcIkNyZWF0ZUFjY291bnRcIjpcclxuICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uc18xLmFjdGlvbkNyZWF0b3JzLmNyZWF0ZUFjY291bnQoKTtcclxuICAgICAgICBjYXNlIFwiRGVwbG95Q29udHJhY3RcIjoge1xyXG4gICAgICAgICAgICBjb25zdCB7IGNvZGUgfSA9IGFjdGlvbi5wYXJhbXM7XHJcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbnNfMS5hY3Rpb25DcmVhdG9ycy5kZXBsb3lDb250cmFjdChjb2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBcIkZ1bmN0aW9uQ2FsbFwiOiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgbWV0aG9kTmFtZSwgYXJncywgZ2FzLCBkZXBvc2l0IH0gPSBhY3Rpb24ucGFyYW1zO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb25zXzEuYWN0aW9uQ3JlYXRvcnMuZnVuY3Rpb25DYWxsKG1ldGhvZE5hbWUsICgwLCBleHBvcnRzLnBhcnNlQXJncykoYXJncyksIG5ldyBibl9qc18xLkJOKGdhcyksIG5ldyBibl9qc18xLkJOKGRlcG9zaXQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBcIlRyYW5zZmVyXCI6IHtcclxuICAgICAgICAgICAgY29uc3QgeyBkZXBvc2l0IH0gPSBhY3Rpb24ucGFyYW1zO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb25zXzEuYWN0aW9uQ3JlYXRvcnMudHJhbnNmZXIobmV3IGJuX2pzXzEuQk4oZGVwb3NpdCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIFwiU3Rha2VcIjoge1xyXG4gICAgICAgICAgICBjb25zdCB7IHN0YWtlLCBwdWJsaWNLZXkgfSA9IGFjdGlvbi5wYXJhbXM7XHJcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbnNfMS5hY3Rpb25DcmVhdG9ycy5zdGFrZShuZXcgYm5fanNfMS5CTihzdGFrZSksIGNyeXB0b18xLlB1YmxpY0tleS5mcm9tKHB1YmxpY0tleSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIFwiQWRkS2V5XCI6IHtcclxuICAgICAgICAgICAgY29uc3QgeyBwdWJsaWNLZXksIGFjY2Vzc0tleSB9ID0gYWN0aW9uLnBhcmFtcztcclxuICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uc18xLmFjdGlvbkNyZWF0b3JzLmFkZEtleShjcnlwdG9fMS5QdWJsaWNLZXkuZnJvbShwdWJsaWNLZXkpLCAvLyBUT0RPOiBVc2UgYWNjZXNzS2V5Lm5vbmNlPyBuZWFyLWFwaS1qcyBzZWVtcyB0byB0aGluayAwIGlzIGZpbmU/XHJcbiAgICAgICAgICAgIGdldEFjY2Vzc0tleShhY2Nlc3NLZXkucGVybWlzc2lvbikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIFwiRGVsZXRlS2V5XCI6IHtcclxuICAgICAgICAgICAgY29uc3QgeyBwdWJsaWNLZXkgfSA9IGFjdGlvbi5wYXJhbXM7XHJcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbnNfMS5hY3Rpb25DcmVhdG9ycy5kZWxldGVLZXkoY3J5cHRvXzEuUHVibGljS2V5LmZyb20ocHVibGljS2V5KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgXCJEZWxldGVBY2NvdW50XCI6IHtcclxuICAgICAgICAgICAgY29uc3QgeyBiZW5lZmljaWFyeUlkIH0gPSBhY3Rpb24ucGFyYW1zO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb25zXzEuYWN0aW9uQ3JlYXRvcnMuZGVsZXRlQWNjb3VudChiZW5lZmljaWFyeUlkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhY3Rpb24gdHlwZVwiKTtcclxuICAgIH1cclxufTtcclxuZXhwb3J0cy5jcmVhdGVBY3Rpb24gPSBjcmVhdGVBY3Rpb247XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZS1hY3Rpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/create-action.js\n");

/***/ })

};
;